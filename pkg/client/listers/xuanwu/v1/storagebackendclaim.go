/*
 Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1 "github.com/Huawei/eSDK_K8S_Plugin/v4/client/apis/xuanwu/v1"
)

// StorageBackendClaimLister helps list StorageBackendClaims.
// All objects returned here must be treated as read-only.
type StorageBackendClaimLister interface {
	// List lists all StorageBackendClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StorageBackendClaim, err error)
	// StorageBackendClaims returns an object that can list and get StorageBackendClaims.
	StorageBackendClaims(namespace string) StorageBackendClaimNamespaceLister
	StorageBackendClaimListerExpansion
}

// storageBackendClaimLister implements the StorageBackendClaimLister interface.
type storageBackendClaimLister struct {
	indexer cache.Indexer
}

// NewStorageBackendClaimLister returns a new StorageBackendClaimLister.
func NewStorageBackendClaimLister(indexer cache.Indexer) StorageBackendClaimLister {
	return &storageBackendClaimLister{indexer: indexer}
}

// List lists all StorageBackendClaims in the indexer.
func (s *storageBackendClaimLister) List(selector labels.Selector) (ret []*v1.StorageBackendClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StorageBackendClaim))
	})
	return ret, err
}

// StorageBackendClaims returns an object that can list and get StorageBackendClaims.
func (s *storageBackendClaimLister) StorageBackendClaims(namespace string) StorageBackendClaimNamespaceLister {
	return storageBackendClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageBackendClaimNamespaceLister helps list and get StorageBackendClaims.
// All objects returned here must be treated as read-only.
type StorageBackendClaimNamespaceLister interface {
	// List lists all StorageBackendClaims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StorageBackendClaim, err error)
	// Get retrieves the StorageBackendClaim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.StorageBackendClaim, error)
	StorageBackendClaimNamespaceListerExpansion
}

// storageBackendClaimNamespaceLister implements the StorageBackendClaimNamespaceLister
// interface.
type storageBackendClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageBackendClaims in the indexer for a given namespace.
func (s storageBackendClaimNamespaceLister) List(selector labels.Selector) (ret []*v1.StorageBackendClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StorageBackendClaim))
	})
	return ret, err
}

// Get retrieves the StorageBackendClaim from the indexer for a given namespace and name.
func (s storageBackendClaimNamespaceLister) Get(name string) (*v1.StorageBackendClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("storagebackendclaim"), name)
	}
	return obj.(*v1.StorageBackendClaim), nil
}
