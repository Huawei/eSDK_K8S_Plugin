/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/oceanstorage/oceandisk/client/client.go
//
// Generated by this command:
//
//	mockgen -source ./storage/oceanstorage/oceandisk/client/client.go -package mock_client \
//	-destination ./test/mocks/mock_client/oceandisk.go OceandiskClientInterface

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	base "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/base"
	client "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/oceandisk/client"
)

// MockOceandiskClientInterface is a mock of OceandiskClientInterface interface.
type MockOceandiskClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOceandiskClientInterfaceMockRecorder
	isgomock struct{}
}

// MockOceandiskClientInterfaceMockRecorder is the mock recorder for MockOceandiskClientInterface.
type MockOceandiskClientInterfaceMockRecorder struct {
	mock *MockOceandiskClientInterface
}

// NewMockOceandiskClientInterface creates a new mock instance.
func NewMockOceandiskClientInterface(ctrl *gomock.Controller) *MockOceandiskClientInterface {
	mock := &MockOceandiskClientInterface{ctrl: ctrl}
	mock.recorder = &MockOceandiskClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOceandiskClientInterface) EXPECT() *MockOceandiskClientInterfaceMockRecorder {
	return m.recorder
}

// ActivateQos mocks base method.
func (m *MockOceandiskClientInterface) ActivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateQos indicates an expected call of ActivateQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) ActivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ActivateQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).ActivateQos), ctx, qosID, vStoreID,
	)
}

// AddFCInitiatorToHost mocks base method.
func (m *MockOceandiskClientInterface) AddFCInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFCInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFCInitiatorToHost indicates an expected call of AddFCInitiatorToHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddFCInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddFCInitiatorToHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddFCInitiatorToHost), ctx,
		initiator, hostID,
	)
}

// AddGroupToMapping mocks base method.
func (m *MockOceandiskClientInterface) AddGroupToMapping(
	ctx context.Context, groupType int, groupID, mappingID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupToMapping", ctx, groupType, groupID, mappingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupToMapping indicates an expected call of AddGroupToMapping.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddGroupToMapping(ctx, groupType, groupID, mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddGroupToMapping", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddGroupToMapping), ctx,
		groupType, groupID, mappingID,
	)
}

// AddHostToGroup mocks base method.
func (m *MockOceandiskClientInterface) AddHostToGroup(ctx context.Context, hostID, hostGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostToGroup", ctx, hostID, hostGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostToGroup indicates an expected call of AddHostToGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddHostToGroup(ctx, hostID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddHostToGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddHostToGroup), ctx, hostID,
		hostGroupID,
	)
}

// AddIscsiInitiator mocks base method.
func (m *MockOceandiskClientInterface) AddIscsiInitiator(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIscsiInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIscsiInitiator indicates an expected call of AddIscsiInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddIscsiInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddIscsiInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddIscsiInitiator), ctx,
		initiator,
	)
}

// AddIscsiInitiatorToHost mocks base method.
func (m *MockOceandiskClientInterface) AddIscsiInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIscsiInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIscsiInitiatorToHost indicates an expected call of AddIscsiInitiatorToHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddIscsiInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddIscsiInitiatorToHost",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddIscsiInitiatorToHost), ctx, initiator, hostID,
	)
}

// AddNamespaceToGroup mocks base method.
func (m *MockOceandiskClientInterface) AddNamespaceToGroup(ctx context.Context, namespaceID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespaceToGroup", ctx, namespaceID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespaceToGroup indicates an expected call of AddNamespaceToGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddNamespaceToGroup(ctx, namespaceID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddNamespaceToGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddNamespaceToGroup), ctx,
		namespaceID, groupID,
	)
}

// AddRoCEInitiator mocks base method.
func (m *MockOceandiskClientInterface) AddRoCEInitiator(ctx context.Context, initiator string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoCEInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoCEInitiator indicates an expected call of AddRoCEInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddRoCEInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddRoCEInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddRoCEInitiator), ctx,
		initiator,
	)
}

// AddRoCEInitiatorToHost mocks base method.
func (m *MockOceandiskClientInterface) AddRoCEInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoCEInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoCEInitiatorToHost indicates an expected call of AddRoCEInitiatorToHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) AddRoCEInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddRoCEInitiatorToHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).AddRoCEInitiatorToHost),
		ctx, initiator, hostID,
	)
}

// BaseCall mocks base method.
func (m *MockOceandiskClientInterface) BaseCall(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseCall", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseCall indicates an expected call of BaseCall.
func (mr *MockOceandiskClientInterfaceMockRecorder) BaseCall(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "BaseCall", reflect.TypeOf((*MockOceandiskClientInterface)(nil).BaseCall), ctx, method, url, data,
	)
}

// Call mocks base method.
func (m *MockOceandiskClientInterface) Call(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockOceandiskClientInterfaceMockRecorder) Call(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Call", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Call), ctx, method, url, data,
	)
}

// CreateHost mocks base method.
func (m *MockOceandiskClientInterface) CreateHost(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateHost(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateHost), ctx, name,
	)
}

// CreateHostGroup mocks base method.
func (m *MockOceandiskClientInterface) CreateHostGroup(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostGroup", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostGroup indicates an expected call of CreateHostGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateHostGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateHostGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateHostGroup), ctx, name,
	)
}

// CreateMapping mocks base method.
func (m *MockOceandiskClientInterface) CreateMapping(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapping indicates an expected call of CreateMapping.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateMapping(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateMapping", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateMapping), ctx, name,
	)
}

// CreateNamespace mocks base method.
func (m *MockOceandiskClientInterface) CreateNamespace(
	ctx context.Context, params client.CreateNamespaceParams,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateNamespace(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateNamespace", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateNamespace), ctx, params,
	)
}

// CreateNamespaceGroup mocks base method.
func (m *MockOceandiskClientInterface) CreateNamespaceGroup(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespaceGroup", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespaceGroup indicates an expected call of CreateNamespaceGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateNamespaceGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateNamespaceGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateNamespaceGroup), ctx,
		name,
	)
}

// CreateQos mocks base method.
func (m *MockOceandiskClientInterface) CreateQos(ctx context.Context, args base.CreateQoSArgs) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQos", ctx, args)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQos indicates an expected call of CreateQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) CreateQos(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).CreateQos), ctx, args,
	)
}

// DeactivateQos mocks base method.
func (m *MockOceandiskClientInterface) DeactivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateQos indicates an expected call of DeactivateQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeactivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeactivateQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeactivateQos), ctx, qosID,
		vStoreID,
	)
}

// Delete mocks base method.
func (m *MockOceandiskClientInterface) Delete(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOceandiskClientInterfaceMockRecorder) Delete(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Delete", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Delete), ctx, url, data,
	)
}

// DeleteHost mocks base method.
func (m *MockOceandiskClientInterface) DeleteHost(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteHost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteHost), ctx, id,
	)
}

// DeleteHostGroup mocks base method.
func (m *MockOceandiskClientInterface) DeleteHostGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostGroup indicates an expected call of DeleteHostGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteHostGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteHostGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteHostGroup), ctx, id,
	)
}

// DeleteMapping mocks base method.
func (m *MockOceandiskClientInterface) DeleteMapping(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapping", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapping indicates an expected call of DeleteMapping.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteMapping(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteMapping", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteMapping), ctx, id,
	)
}

// DeleteNamespace mocks base method.
func (m *MockOceandiskClientInterface) DeleteNamespace(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteNamespace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteNamespace", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteNamespace), ctx, id,
	)
}

// DeleteNamespaceGroup mocks base method.
func (m *MockOceandiskClientInterface) DeleteNamespaceGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespaceGroup indicates an expected call of DeleteNamespaceGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteNamespaceGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteNamespaceGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteNamespaceGroup), ctx,
		id,
	)
}

// DeleteQos mocks base method.
func (m *MockOceandiskClientInterface) DeleteQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQos indicates an expected call of DeleteQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) DeleteQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).DeleteQos), ctx, qosID, vStoreID,
	)
}

// ExtendNamespace mocks base method.
func (m *MockOceandiskClientInterface) ExtendNamespace(
	ctx context.Context, namespaceID string, newCapacity int64,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendNamespace", ctx, namespaceID, newCapacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendNamespace indicates an expected call of ExtendNamespace.
func (mr *MockOceandiskClientInterfaceMockRecorder) ExtendNamespace(ctx, namespaceID, newCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ExtendNamespace", reflect.TypeOf((*MockOceandiskClientInterface)(nil).ExtendNamespace), ctx,
		namespaceID, newCapacity,
	)
}

// Get mocks base method.
func (m *MockOceandiskClientInterface) Get(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOceandiskClientInterfaceMockRecorder) Get(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Get", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Get), ctx, url, data,
	)
}

// GetAllPools mocks base method.
func (m *MockOceandiskClientInterface) GetAllPools(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetAllPools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllPools", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetAllPools), ctx,
	)
}

// GetAllQos mocks base method.
func (m *MockOceandiskClientInterface) GetAllQos(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQos", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQos indicates an expected call of GetAllQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetAllQos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetAllQos), ctx,
	)
}

// GetAllRemoteDevices mocks base method.
func (m *MockOceandiskClientInterface) GetAllRemoteDevices(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemoteDevices", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRemoteDevices indicates an expected call of GetAllRemoteDevices.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetAllRemoteDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllRemoteDevices", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetAllRemoteDevices), ctx,
	)
}

// GetApplicationTypeByName mocks base method.
func (m *MockOceandiskClientInterface) GetApplicationTypeByName(ctx context.Context, appType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTypeByName", ctx, appType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTypeByName indicates an expected call of GetApplicationTypeByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetApplicationTypeByName(ctx, appType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetApplicationTypeByName",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetApplicationTypeByName), ctx, appType,
	)
}

// GetBackendID mocks base method.
func (m *MockOceandiskClientInterface) GetBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendID indicates an expected call of GetBackendID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetBackendID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetBackendID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetBackendID),
	)
}

// GetDeviceSN mocks base method.
func (m *MockOceandiskClientInterface) GetDeviceSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceSN indicates an expected call of GetDeviceSN.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetDeviceSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetDeviceSN", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetDeviceSN),
	)
}

// GetFCHostLink mocks base method.
func (m *MockOceandiskClientInterface) GetFCHostLink(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCHostLink", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCHostLink indicates an expected call of GetFCHostLink.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetFCHostLink(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCHostLink", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetFCHostLink), ctx, hostID,
	)
}

// GetFCInitiator mocks base method.
func (m *MockOceandiskClientInterface) GetFCInitiator(ctx context.Context, wwn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCInitiator", ctx, wwn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCInitiator indicates an expected call of GetFCInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetFCInitiator(ctx, wwn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetFCInitiator), ctx, wwn,
	)
}

// GetFCInitiatorByID mocks base method.
func (m *MockOceandiskClientInterface) GetFCInitiatorByID(ctx context.Context, wwn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCInitiatorByID", ctx, wwn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCInitiatorByID indicates an expected call of GetFCInitiatorByID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetFCInitiatorByID(ctx, wwn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCInitiatorByID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetFCInitiatorByID), ctx, wwn,
	)
}

// GetFCTargetWWNs mocks base method.
func (m *MockOceandiskClientInterface) GetFCTargetWWNs(ctx context.Context, initiatorWWN string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCTargetWWNs", ctx, initiatorWWN)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCTargetWWNs indicates an expected call of GetFCTargetWWNs.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetFCTargetWWNs(ctx, initiatorWWN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCTargetWWNs", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetFCTargetWWNs), ctx,
		initiatorWWN,
	)
}

// GetHostByName mocks base method.
func (m *MockOceandiskClientInterface) GetHostByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByName indicates an expected call of GetHostByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetHostByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetHostByName), ctx, name,
	)
}

// GetHostGroupByName mocks base method.
func (m *MockOceandiskClientInterface) GetHostGroupByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupByName indicates an expected call of GetHostGroupByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetHostGroupByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostGroupByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetHostGroupByName), ctx,
		name,
	)
}

// GetHostNamespaceId mocks base method.
func (m *MockOceandiskClientInterface) GetHostNamespaceId(ctx context.Context, hostID, namespaceID string) (
	string, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNamespaceId", ctx, hostID, namespaceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNamespaceId indicates an expected call of GetHostNamespaceId.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetHostNamespaceId(ctx, hostID, namespaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostNamespaceId", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetHostNamespaceId), ctx,
		hostID, namespaceID,
	)
}

// GetISCSIHostLink mocks base method.
func (m *MockOceandiskClientInterface) GetISCSIHostLink(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISCSIHostLink", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISCSIHostLink indicates an expected call of GetISCSIHostLink.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetISCSIHostLink(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetISCSIHostLink", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetISCSIHostLink), ctx, hostID,
	)
}

// GetIscsiInitiator mocks base method.
func (m *MockOceandiskClientInterface) GetIscsiInitiator(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiInitiator indicates an expected call of GetIscsiInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetIscsiInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetIscsiInitiator), ctx,
		initiator,
	)
}

// GetIscsiInitiatorByID mocks base method.
func (m *MockOceandiskClientInterface) GetIscsiInitiatorByID(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiInitiatorByID", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiInitiatorByID indicates an expected call of GetIscsiInitiatorByID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetIscsiInitiatorByID(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiInitiatorByID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetIscsiInitiatorByID),
		ctx, initiator,
	)
}

// GetIscsiTgtPort mocks base method.
func (m *MockOceandiskClientInterface) GetIscsiTgtPort(ctx context.Context) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiTgtPort", ctx)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiTgtPort indicates an expected call of GetIscsiTgtPort.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetIscsiTgtPort(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiTgtPort", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetIscsiTgtPort), ctx,
	)
}

// GetLicenseFeature mocks base method.
func (m *MockOceandiskClientInterface) GetLicenseFeature(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseFeature", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseFeature indicates an expected call of GetLicenseFeature.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetLicenseFeature(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLicenseFeature", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetLicenseFeature), ctx,
	)
}

// GetMappingByName mocks base method.
func (m *MockOceandiskClientInterface) GetMappingByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappingByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMappingByName indicates an expected call of GetMappingByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetMappingByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetMappingByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetMappingByName), ctx, name,
	)
}

// GetNamespaceByID mocks base method.
func (m *MockOceandiskClientInterface) GetNamespaceByID(ctx context.Context, id string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByID", ctx, id)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceByID indicates an expected call of GetNamespaceByID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetNamespaceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNamespaceByID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetNamespaceByID), ctx, id,
	)
}

// GetNamespaceByName mocks base method.
func (m *MockOceandiskClientInterface) GetNamespaceByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceByName indicates an expected call of GetNamespaceByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetNamespaceByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNamespaceByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetNamespaceByName), ctx,
		name,
	)
}

// GetNamespaceCountOfHost mocks base method.
func (m *MockOceandiskClientInterface) GetNamespaceCountOfHost(ctx context.Context, hostID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceCountOfHost", ctx, hostID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceCountOfHost indicates an expected call of GetNamespaceCountOfHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetNamespaceCountOfHost(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNamespaceCountOfHost",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetNamespaceCountOfHost), ctx, hostID,
	)
}

// GetNamespaceCountOfMapping mocks base method.
func (m *MockOceandiskClientInterface) GetNamespaceCountOfMapping(ctx context.Context, mappingID string) (
	int64, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceCountOfMapping", ctx, mappingID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceCountOfMapping indicates an expected call of GetNamespaceCountOfMapping.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetNamespaceCountOfMapping(ctx, mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNamespaceCountOfMapping",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetNamespaceCountOfMapping), ctx, mappingID,
	)
}

// GetNamespaceGroupByName mocks base method.
func (m *MockOceandiskClientInterface) GetNamespaceGroupByName(ctx context.Context, name string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceGroupByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceGroupByName indicates an expected call of GetNamespaceGroupByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetNamespaceGroupByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNamespaceGroupByName",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetNamespaceGroupByName), ctx, name,
	)
}

// GetPoolByName mocks base method.
func (m *MockOceandiskClientInterface) GetPoolByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolByName indicates an expected call of GetPoolByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetPoolByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetPoolByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetPoolByName), ctx, name,
	)
}

// GetQosByID mocks base method.
func (m *MockOceandiskClientInterface) GetQosByID(ctx context.Context, qosID, vStoreID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByID", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByID indicates an expected call of GetQosByID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetQosByID(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetQosByID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetQosByID), ctx, qosID, vStoreID,
	)
}

// GetQosByName mocks base method.
func (m *MockOceandiskClientInterface) GetQosByName(ctx context.Context, name, vStoreID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByName", ctx, name, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByName indicates an expected call of GetQosByName.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetQosByName(ctx, name, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetQosByName", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetQosByName), ctx, name, vStoreID,
	)
}

// GetRemoteDeviceBySN mocks base method.
func (m *MockOceandiskClientInterface) GetRemoteDeviceBySN(ctx context.Context, sn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteDeviceBySN", ctx, sn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteDeviceBySN indicates an expected call of GetRemoteDeviceBySN.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetRemoteDeviceBySN(ctx, sn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRemoteDeviceBySN", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetRemoteDeviceBySN), ctx,
		sn,
	)
}

// GetRequest mocks base method.
func (m *MockOceandiskClientInterface) GetRequest(
	ctx context.Context, method, url string, data map[string]any,
) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, method, url, data)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetRequest(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRequest", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetRequest), ctx, method, url, data,
	)
}

// GetRoCEInitiator mocks base method.
func (m *MockOceandiskClientInterface) GetRoCEInitiator(ctx context.Context, initiator string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEInitiator indicates an expected call of GetRoCEInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetRoCEInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetRoCEInitiator), ctx,
		initiator,
	)
}

// GetRoCEInitiatorByID mocks base method.
func (m *MockOceandiskClientInterface) GetRoCEInitiatorByID(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEInitiatorByID", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEInitiatorByID indicates an expected call of GetRoCEInitiatorByID.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetRoCEInitiatorByID(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEInitiatorByID", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetRoCEInitiatorByID), ctx,
		initiator,
	)
}

// GetRoCEPortalByIP mocks base method.
func (m *MockOceandiskClientInterface) GetRoCEPortalByIP(ctx context.Context, tgtPortal string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEPortalByIP", ctx, tgtPortal)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEPortalByIP indicates an expected call of GetRoCEPortalByIP.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetRoCEPortalByIP(ctx, tgtPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEPortalByIP", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetRoCEPortalByIP), ctx,
		tgtPortal,
	)
}

// GetStorageVersion mocks base method.
func (m *MockOceandiskClientInterface) GetStorageVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageVersion indicates an expected call of GetStorageVersion.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetStorageVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetStorageVersion", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetStorageVersion),
	)
}

// GetSystem mocks base method.
func (m *MockOceandiskClientInterface) GetSystem(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystem", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystem indicates an expected call of GetSystem.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetSystem(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetSystem", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetSystem), ctx,
	)
}

// GetSystemUTCTime mocks base method.
func (m *MockOceandiskClientInterface) GetSystemUTCTime(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemUTCTime", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemUTCTime indicates an expected call of GetSystemUTCTime.
func (mr *MockOceandiskClientInterfaceMockRecorder) GetSystemUTCTime(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetSystemUTCTime", reflect.TypeOf((*MockOceandiskClientInterface)(nil).GetSystemUTCTime), ctx,
	)
}

// Login mocks base method.
func (m *MockOceandiskClientInterface) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockOceandiskClientInterfaceMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Login", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Login), ctx,
	)
}

// Logout mocks base method.
func (m *MockOceandiskClientInterface) Logout(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout.
func (mr *MockOceandiskClientInterfaceMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Logout", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Logout), ctx,
	)
}

// Post mocks base method.
func (m *MockOceandiskClientInterface) Post(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockOceandiskClientInterfaceMockRecorder) Post(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Post", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Post), ctx, url, data,
	)
}

// Put mocks base method.
func (m *MockOceandiskClientInterface) Put(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOceandiskClientInterfaceMockRecorder) Put(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Put", reflect.TypeOf((*MockOceandiskClientInterface)(nil).Put), ctx, url, data,
	)
}

// QueryAssociateHostGroup mocks base method.
func (m *MockOceandiskClientInterface) QueryAssociateHostGroup(ctx context.Context, objType int, objID string) (
	[]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssociateHostGroup", ctx, objType, objID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssociateHostGroup indicates an expected call of QueryAssociateHostGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) QueryAssociateHostGroup(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryAssociateHostGroup",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).QueryAssociateHostGroup), ctx, objType, objID,
	)
}

// QueryAssociateNamespaceGroup mocks base method.
func (m *MockOceandiskClientInterface) QueryAssociateNamespaceGroup(
	ctx context.Context, objType int, objID string,
) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssociateNamespaceGroup", ctx, objType, objID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssociateNamespaceGroup indicates an expected call of QueryAssociateNamespaceGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) QueryAssociateNamespaceGroup(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryAssociateNamespaceGroup",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).QueryAssociateNamespaceGroup), ctx, objType, objID,
	)
}

// QueryFCInitiatorByHost mocks base method.
func (m *MockOceandiskClientInterface) QueryFCInitiatorByHost(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFCInitiatorByHost", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFCInitiatorByHost indicates an expected call of QueryFCInitiatorByHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) QueryFCInitiatorByHost(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryFCInitiatorByHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).QueryFCInitiatorByHost),
		ctx, hostID,
	)
}

// ReLogin mocks base method.
func (m *MockOceandiskClientInterface) ReLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockOceandiskClientInterfaceMockRecorder) ReLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ReLogin", reflect.TypeOf((*MockOceandiskClientInterface)(nil).ReLogin), ctx,
	)
}

// RemoveGroupFromMapping mocks base method.
func (m *MockOceandiskClientInterface) RemoveGroupFromMapping(
	ctx context.Context, groupType int, groupID, mappingID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupFromMapping", ctx, groupType, groupID, mappingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroupFromMapping indicates an expected call of RemoveGroupFromMapping.
func (mr *MockOceandiskClientInterfaceMockRecorder) RemoveGroupFromMapping(ctx, groupType, groupID, mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveGroupFromMapping", reflect.TypeOf((*MockOceandiskClientInterface)(nil).RemoveGroupFromMapping),
		ctx, groupType, groupID, mappingID,
	)
}

// RemoveHostFromGroup mocks base method.
func (m *MockOceandiskClientInterface) RemoveHostFromGroup(ctx context.Context, hostID, hostGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostFromGroup", ctx, hostID, hostGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostFromGroup indicates an expected call of RemoveHostFromGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) RemoveHostFromGroup(ctx, hostID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveHostFromGroup", reflect.TypeOf((*MockOceandiskClientInterface)(nil).RemoveHostFromGroup), ctx,
		hostID, hostGroupID,
	)
}

// RemoveNamespaceFromGroup mocks base method.
func (m *MockOceandiskClientInterface) RemoveNamespaceFromGroup(
	ctx context.Context, namespaceID, groupID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamespaceFromGroup", ctx, namespaceID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNamespaceFromGroup indicates an expected call of RemoveNamespaceFromGroup.
func (mr *MockOceandiskClientInterfaceMockRecorder) RemoveNamespaceFromGroup(ctx, namespaceID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveNamespaceFromGroup",
		reflect.TypeOf((*MockOceandiskClientInterface)(nil).RemoveNamespaceFromGroup), ctx, namespaceID, groupID,
	)
}

// UpdateFCInitiator mocks base method.
func (m *MockOceandiskClientInterface) UpdateFCInitiator(ctx context.Context, wwn string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFCInitiator", ctx, wwn, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFCInitiator indicates an expected call of UpdateFCInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) UpdateFCInitiator(ctx, wwn, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateFCInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).UpdateFCInitiator), ctx, wwn,
		alua,
	)
}

// UpdateHost mocks base method.
func (m *MockOceandiskClientInterface) UpdateHost(ctx context.Context, id string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", ctx, id, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost.
func (mr *MockOceandiskClientInterfaceMockRecorder) UpdateHost(ctx, id, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateHost", reflect.TypeOf((*MockOceandiskClientInterface)(nil).UpdateHost), ctx, id, alua,
	)
}

// UpdateIscsiInitiator mocks base method.
func (m *MockOceandiskClientInterface) UpdateIscsiInitiator(
	ctx context.Context, initiator string, alua map[string]any,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIscsiInitiator", ctx, initiator, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIscsiInitiator indicates an expected call of UpdateIscsiInitiator.
func (mr *MockOceandiskClientInterfaceMockRecorder) UpdateIscsiInitiator(ctx, initiator, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateIscsiInitiator", reflect.TypeOf((*MockOceandiskClientInterface)(nil).UpdateIscsiInitiator), ctx,
		initiator, alua,
	)
}

// UpdateNamespace mocks base method.
func (m *MockOceandiskClientInterface) UpdateNamespace(
	ctx context.Context, namespaceID string, params map[string]any,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", ctx, namespaceID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockOceandiskClientInterfaceMockRecorder) UpdateNamespace(ctx, namespaceID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateNamespace", reflect.TypeOf((*MockOceandiskClientInterface)(nil).UpdateNamespace), ctx,
		namespaceID, params,
	)
}

// UpdateQos mocks base method.
func (m *MockOceandiskClientInterface) UpdateQos(
	ctx context.Context, qosID, vStoreID string, params map[string]any,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQos", ctx, qosID, vStoreID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQos indicates an expected call of UpdateQos.
func (mr *MockOceandiskClientInterfaceMockRecorder) UpdateQos(ctx, qosID, vStoreID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateQos", reflect.TypeOf((*MockOceandiskClientInterface)(nil).UpdateQos), ctx, qosID, vStoreID,
		params,
	)
}
