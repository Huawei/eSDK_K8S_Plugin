/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/oceanstorage/oceanstor/client/client.go
//
// Generated by this command:
//
//	mockgen -source ./storage/oceanstorage/oceanstor/client/client.go -package mock_client \
//	-destination ./test/mocks/mock_client/oceanstor.go OceanstorClientInterface
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	base "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/base"
	client "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/oceanstor/client"
)

// MockOceanstorClientInterface is a mock of OceanstorClientInterface interface.
type MockOceanstorClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOceanstorClientInterfaceMockRecorder
	isgomock struct{}
}

// MockOceanstorClientInterfaceMockRecorder is the mock recorder for MockOceanstorClientInterface.
type MockOceanstorClientInterfaceMockRecorder struct {
	mock *MockOceanstorClientInterface
}

// NewMockOceanstorClientInterface creates a new mock instance.
func NewMockOceanstorClientInterface(ctrl *gomock.Controller) *MockOceanstorClientInterface {
	mock := &MockOceanstorClientInterface{ctrl: ctrl}
	mock.recorder = &MockOceanstorClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOceanstorClientInterface) EXPECT() *MockOceanstorClientInterfaceMockRecorder {
	return m.recorder
}

// ActivateLunSnapshot mocks base method.
func (m *MockOceanstorClientInterface) ActivateLunSnapshot(ctx context.Context, snapshotID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateLunSnapshot", ctx, snapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateLunSnapshot indicates an expected call of ActivateLunSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) ActivateLunSnapshot(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ActivateLunSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).ActivateLunSnapshot), ctx,
		snapshotID,
	)
}

// ActivateQos mocks base method.
func (m *MockOceanstorClientInterface) ActivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateQos indicates an expected call of ActivateQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) ActivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ActivateQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).ActivateQos), ctx, qosID, vStoreID,
	)
}

// AddFCInitiatorToHost mocks base method.
func (m *MockOceanstorClientInterface) AddFCInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFCInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFCInitiatorToHost indicates an expected call of AddFCInitiatorToHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddFCInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddFCInitiatorToHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddFCInitiatorToHost), ctx,
		initiator, hostID,
	)
}

// AddGroupToMapping mocks base method.
func (m *MockOceanstorClientInterface) AddGroupToMapping(
	ctx context.Context, groupType int, groupID, mappingID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupToMapping", ctx, groupType, groupID, mappingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupToMapping indicates an expected call of AddGroupToMapping.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddGroupToMapping(ctx, groupType, groupID,
	mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddGroupToMapping", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddGroupToMapping), ctx,
		groupType, groupID, mappingID,
	)
}

// AddHostToGroup mocks base method.
func (m *MockOceanstorClientInterface) AddHostToGroup(ctx context.Context, hostID, hostGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHostToGroup", ctx, hostID, hostGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHostToGroup indicates an expected call of AddHostToGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddHostToGroup(ctx, hostID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddHostToGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddHostToGroup), ctx, hostID,
		hostGroupID,
	)
}

// AddIscsiInitiator mocks base method.
func (m *MockOceanstorClientInterface) AddIscsiInitiator(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIscsiInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIscsiInitiator indicates an expected call of AddIscsiInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddIscsiInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddIscsiInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddIscsiInitiator), ctx,
		initiator,
	)
}

// AddIscsiInitiatorToHost mocks base method.
func (m *MockOceanstorClientInterface) AddIscsiInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIscsiInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIscsiInitiatorToHost indicates an expected call of AddIscsiInitiatorToHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddIscsiInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddIscsiInitiatorToHost",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddIscsiInitiatorToHost), ctx, initiator, hostID,
	)
}

// AddLunToGroup mocks base method.
func (m *MockOceanstorClientInterface) AddLunToGroup(ctx context.Context, lunID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLunToGroup", ctx, lunID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLunToGroup indicates an expected call of AddLunToGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddLunToGroup(ctx, lunID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddLunToGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddLunToGroup), ctx, lunID,
		groupID,
	)
}

// AddRoCEInitiator mocks base method.
func (m *MockOceanstorClientInterface) AddRoCEInitiator(ctx context.Context, initiator string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoCEInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoCEInitiator indicates an expected call of AddRoCEInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddRoCEInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddRoCEInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddRoCEInitiator), ctx,
		initiator,
	)
}

// AddRoCEInitiatorToHost mocks base method.
func (m *MockOceanstorClientInterface) AddRoCEInitiatorToHost(ctx context.Context, initiator, hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoCEInitiatorToHost", ctx, initiator, hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoCEInitiatorToHost indicates an expected call of AddRoCEInitiatorToHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) AddRoCEInitiatorToHost(ctx, initiator, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AddRoCEInitiatorToHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AddRoCEInitiatorToHost),
		ctx, initiator, hostID,
	)
}

// AllowNfsShareAccess mocks base method.
func (m *MockOceanstorClientInterface) AllowNfsShareAccess(
	ctx context.Context, req *client.AllowNfsShareAccessRequest,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowNfsShareAccess", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowNfsShareAccess indicates an expected call of AllowNfsShareAccess.
func (mr *MockOceanstorClientInterfaceMockRecorder) AllowNfsShareAccess(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "AllowNfsShareAccess", reflect.TypeOf((*MockOceanstorClientInterface)(nil).AllowNfsShareAccess), ctx,
		req,
	)
}

// BaseCall mocks base method.
func (m *MockOceanstorClientInterface) BaseCall(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseCall", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseCall indicates an expected call of BaseCall.
func (mr *MockOceanstorClientInterfaceMockRecorder) BaseCall(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "BaseCall", reflect.TypeOf((*MockOceanstorClientInterface)(nil).BaseCall), ctx, method, url, data,
	)
}

// BatchGetQuota mocks base method.
func (m *MockOceanstorClientInterface) BatchGetQuota(ctx context.Context, params map[string]any) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetQuota", ctx, params)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetQuota indicates an expected call of BatchGetQuota.
func (mr *MockOceanstorClientInterfaceMockRecorder) BatchGetQuota(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "BatchGetQuota", reflect.TypeOf((*MockOceanstorClientInterface)(nil).BatchGetQuota), ctx, params,
	)
}

// Call mocks base method.
func (m *MockOceanstorClientInterface) Call(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockOceanstorClientInterfaceMockRecorder) Call(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Call", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Call), ctx, method, url, data,
	)
}

// CloneFileSystem mocks base method.
func (m *MockOceanstorClientInterface) CloneFileSystem(
	ctx context.Context, name string, allocType int, parentID, parentSnapshotID string,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneFileSystem", ctx, name, allocType, parentID, parentSnapshotID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneFileSystem indicates an expected call of CloneFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) CloneFileSystem(ctx, name, allocType, parentID,
	parentSnapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CloneFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CloneFileSystem), ctx, name,
		allocType, parentID, parentSnapshotID,
	)
}

// CreateClonePair mocks base method.
func (m *MockOceanstorClientInterface) CreateClonePair(
	ctx context.Context, srcLunID, dstLunID string, cloneSpeed int,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClonePair", ctx, srcLunID, dstLunID, cloneSpeed)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClonePair indicates an expected call of CreateClonePair.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateClonePair(ctx, srcLunID, dstLunID,
	cloneSpeed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateClonePair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateClonePair), ctx, srcLunID,
		dstLunID, cloneSpeed,
	)
}

// CreateDTree mocks base method.
func (m *MockOceanstorClientInterface) CreateDTree(ctx context.Context, params map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDTree", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDTree indicates an expected call of CreateDTree.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateDTree(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateDTree", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateDTree), ctx, params,
	)
}

// CreateFSSnapshot mocks base method.
func (m *MockOceanstorClientInterface) CreateFSSnapshot(ctx context.Context, name, parentID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFSSnapshot", ctx, name, parentID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFSSnapshot indicates an expected call of CreateFSSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateFSSnapshot(ctx, name, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateFSSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateFSSnapshot), ctx, name,
		parentID,
	)
}

// CreateFileSystem mocks base method.
func (m *MockOceanstorClientInterface) CreateFileSystem(ctx context.Context, params map[string]any) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateFileSystem), ctx, params,
	)
}

// CreateHost mocks base method.
func (m *MockOceanstorClientInterface) CreateHost(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateHost(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateHost), ctx, name,
	)
}

// CreateHostGroup mocks base method.
func (m *MockOceanstorClientInterface) CreateHostGroup(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostGroup", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostGroup indicates an expected call of CreateHostGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateHostGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateHostGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateHostGroup), ctx, name,
	)
}

// CreateHyperMetroPair mocks base method.
func (m *MockOceanstorClientInterface) CreateHyperMetroPair(ctx context.Context, data map[string]any) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHyperMetroPair", ctx, data)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHyperMetroPair indicates an expected call of CreateHyperMetroPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateHyperMetroPair(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateHyperMetroPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateHyperMetroPair), ctx,
		data,
	)
}

// CreateLun mocks base method.
func (m *MockOceanstorClientInterface) CreateLun(ctx context.Context, params map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLun", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLun indicates an expected call of CreateLun.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateLun(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateLun", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateLun), ctx, params,
	)
}

// CreateLunCopy mocks base method.
func (m *MockOceanstorClientInterface) CreateLunCopy(
	ctx context.Context, name, srcLunID, dstLunID string, copySpeed int,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLunCopy", ctx, name, srcLunID, dstLunID, copySpeed)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLunCopy indicates an expected call of CreateLunCopy.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateLunCopy(ctx, name, srcLunID, dstLunID,
	copySpeed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateLunCopy", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateLunCopy), ctx, name,
		srcLunID, dstLunID, copySpeed,
	)
}

// CreateLunGroup mocks base method.
func (m *MockOceanstorClientInterface) CreateLunGroup(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLunGroup", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLunGroup indicates an expected call of CreateLunGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateLunGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateLunGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateLunGroup), ctx, name,
	)
}

// CreateLunSnapshot mocks base method.
func (m *MockOceanstorClientInterface) CreateLunSnapshot(ctx context.Context, name, lunID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLunSnapshot", ctx, name, lunID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLunSnapshot indicates an expected call of CreateLunSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateLunSnapshot(ctx, name, lunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateLunSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateLunSnapshot), ctx, name,
		lunID,
	)
}

// CreateMapping mocks base method.
func (m *MockOceanstorClientInterface) CreateMapping(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapping indicates an expected call of CreateMapping.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateMapping(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateMapping", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateMapping), ctx, name,
	)
}

// CreateNfsShare mocks base method.
func (m *MockOceanstorClientInterface) CreateNfsShare(ctx context.Context, params map[string]any) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNfsShare", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfsShare indicates an expected call of CreateNfsShare.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateNfsShare(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateNfsShare", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateNfsShare), ctx, params,
	)
}

// CreateQos mocks base method.
func (m *MockOceanstorClientInterface) CreateQos(ctx context.Context, args base.CreateQoSArgs) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQos", ctx, args)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQos indicates an expected call of CreateQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateQos(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateQos), ctx, args,
	)
}

// CreateQuota mocks base method.
func (m *MockOceanstorClientInterface) CreateQuota(ctx context.Context, params map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuota", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuota indicates an expected call of CreateQuota.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateQuota(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateQuota", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateQuota), ctx, params,
	)
}

// CreateReplicationPair mocks base method.
func (m *MockOceanstorClientInterface) CreateReplicationPair(ctx context.Context, data map[string]any) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationPair", ctx, data)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationPair indicates an expected call of CreateReplicationPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) CreateReplicationPair(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "CreateReplicationPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).CreateReplicationPair),
		ctx, data,
	)
}

// DeactivateLunSnapshot mocks base method.
func (m *MockOceanstorClientInterface) DeactivateLunSnapshot(ctx context.Context, snapshotID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateLunSnapshot", ctx, snapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateLunSnapshot indicates an expected call of DeactivateLunSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeactivateLunSnapshot(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeactivateLunSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeactivateLunSnapshot),
		ctx, snapshotID,
	)
}

// DeactivateQos mocks base method.
func (m *MockOceanstorClientInterface) DeactivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateQos indicates an expected call of DeactivateQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeactivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeactivateQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeactivateQos), ctx, qosID,
		vStoreID,
	)
}

// Delete mocks base method.
func (m *MockOceanstorClientInterface) Delete(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOceanstorClientInterfaceMockRecorder) Delete(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Delete", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Delete), ctx, url, data,
	)
}

// DeleteClonePair mocks base method.
func (m *MockOceanstorClientInterface) DeleteClonePair(ctx context.Context, clonePairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClonePair", ctx, clonePairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClonePair indicates an expected call of DeleteClonePair.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteClonePair(ctx, clonePairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteClonePair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteClonePair), ctx,
		clonePairID,
	)
}

// DeleteDTreeByID mocks base method.
func (m *MockOceanstorClientInterface) DeleteDTreeByID(ctx context.Context, vStoreID, dTreeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDTreeByID", ctx, vStoreID, dTreeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDTreeByID indicates an expected call of DeleteDTreeByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteDTreeByID(ctx, vStoreID, dTreeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteDTreeByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteDTreeByID), ctx, vStoreID,
		dTreeID,
	)
}

// DeleteDTreeByName mocks base method.
func (m *MockOceanstorClientInterface) DeleteDTreeByName(
	ctx context.Context, parentName, dTreeName, vStoreID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDTreeByName", ctx, parentName, dTreeName, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDTreeByName indicates an expected call of DeleteDTreeByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteDTreeByName(ctx, parentName, dTreeName,
	vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteDTreeByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteDTreeByName), ctx,
		parentName, dTreeName, vStoreID,
	)
}

// DeleteFSSnapshot mocks base method.
func (m *MockOceanstorClientInterface) DeleteFSSnapshot(ctx context.Context, snapshotID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFSSnapshot", ctx, snapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFSSnapshot indicates an expected call of DeleteFSSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteFSSnapshot(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteFSSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteFSSnapshot), ctx,
		snapshotID,
	)
}

// DeleteFileSystem mocks base method.
func (m *MockOceanstorClientInterface) DeleteFileSystem(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteFileSystem), ctx, params,
	)
}

// DeleteHost mocks base method.
func (m *MockOceanstorClientInterface) DeleteHost(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteHost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteHost), ctx, id,
	)
}

// DeleteHostGroup mocks base method.
func (m *MockOceanstorClientInterface) DeleteHostGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostGroup indicates an expected call of DeleteHostGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteHostGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteHostGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteHostGroup), ctx, id,
	)
}

// DeleteHyperMetroPair mocks base method.
func (m *MockOceanstorClientInterface) DeleteHyperMetroPair(
	ctx context.Context, pairID string, onlineDelete bool,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHyperMetroPair", ctx, pairID, onlineDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHyperMetroPair indicates an expected call of DeleteHyperMetroPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteHyperMetroPair(ctx, pairID, onlineDelete any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteHyperMetroPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteHyperMetroPair), ctx,
		pairID, onlineDelete,
	)
}

// DeleteLun mocks base method.
func (m *MockOceanstorClientInterface) DeleteLun(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLun", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLun indicates an expected call of DeleteLun.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteLun(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteLun", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteLun), ctx, id,
	)
}

// DeleteLunCopy mocks base method.
func (m *MockOceanstorClientInterface) DeleteLunCopy(ctx context.Context, lunCopyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLunCopy", ctx, lunCopyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLunCopy indicates an expected call of DeleteLunCopy.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteLunCopy(ctx, lunCopyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteLunCopy", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteLunCopy), ctx, lunCopyID,
	)
}

// DeleteLunGroup mocks base method.
func (m *MockOceanstorClientInterface) DeleteLunGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLunGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLunGroup indicates an expected call of DeleteLunGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteLunGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteLunGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteLunGroup), ctx, id,
	)
}

// DeleteLunSnapshot mocks base method.
func (m *MockOceanstorClientInterface) DeleteLunSnapshot(ctx context.Context, snapshotID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLunSnapshot", ctx, snapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLunSnapshot indicates an expected call of DeleteLunSnapshot.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteLunSnapshot(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteLunSnapshot", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteLunSnapshot), ctx,
		snapshotID,
	)
}

// DeleteMapping mocks base method.
func (m *MockOceanstorClientInterface) DeleteMapping(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapping", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapping indicates an expected call of DeleteMapping.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteMapping(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteMapping", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteMapping), ctx, id,
	)
}

// DeleteNfsShare mocks base method.
func (m *MockOceanstorClientInterface) DeleteNfsShare(ctx context.Context, id, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShare", ctx, id, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShare indicates an expected call of DeleteNfsShare.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteNfsShare(ctx, id, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteNfsShare", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteNfsShare), ctx, id,
		vStoreID,
	)
}

// DeleteNfsShareAccess mocks base method.
func (m *MockOceanstorClientInterface) DeleteNfsShareAccess(ctx context.Context, accessID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShareAccess", ctx, accessID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShareAccess indicates an expected call of DeleteNfsShareAccess.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteNfsShareAccess(ctx, accessID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteNfsShareAccess", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteNfsShareAccess), ctx,
		accessID, vStoreID,
	)
}

// DeleteQos mocks base method.
func (m *MockOceanstorClientInterface) DeleteQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQos indicates an expected call of DeleteQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteQos), ctx, qosID, vStoreID,
	)
}

// DeleteQuota mocks base method.
func (m *MockOceanstorClientInterface) DeleteQuota(
	ctx context.Context, quotaID, vStoreID string, forceFlag bool,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuota", ctx, quotaID, vStoreID, forceFlag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuota indicates an expected call of DeleteQuota.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteQuota(ctx, quotaID, vStoreID, forceFlag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteQuota", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteQuota), ctx, quotaID,
		vStoreID, forceFlag,
	)
}

// DeleteReplicationPair mocks base method.
func (m *MockOceanstorClientInterface) DeleteReplicationPair(ctx context.Context, pairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationPair", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplicationPair indicates an expected call of DeleteReplicationPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) DeleteReplicationPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteReplicationPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DeleteReplicationPair),
		ctx, pairID,
	)
}

// DuplicateClient mocks base method.
func (m *MockOceanstorClientInterface) DuplicateClient() *client.OceanstorClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateClient")
	ret0, _ := ret[0].(*client.OceanstorClient)
	return ret0
}

// DuplicateClient indicates an expected call of DuplicateClient.
func (mr *MockOceanstorClientInterfaceMockRecorder) DuplicateClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DuplicateClient", reflect.TypeOf((*MockOceanstorClientInterface)(nil).DuplicateClient),
	)
}

// ExtendFileSystem mocks base method.
func (m *MockOceanstorClientInterface) ExtendFileSystem(ctx context.Context, fsID string, newCapacity int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendFileSystem", ctx, fsID, newCapacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendFileSystem indicates an expected call of ExtendFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) ExtendFileSystem(ctx, fsID, newCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ExtendFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).ExtendFileSystem), ctx, fsID,
		newCapacity,
	)
}

// ExtendLun mocks base method.
func (m *MockOceanstorClientInterface) ExtendLun(ctx context.Context, lunID string, newCapacity int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLun", ctx, lunID, newCapacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendLun indicates an expected call of ExtendLun.
func (mr *MockOceanstorClientInterfaceMockRecorder) ExtendLun(ctx, lunID, newCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ExtendLun", reflect.TypeOf((*MockOceanstorClientInterface)(nil).ExtendLun), ctx, lunID, newCapacity,
	)
}

// Get mocks base method.
func (m *MockOceanstorClientInterface) Get(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOceanstorClientInterfaceMockRecorder) Get(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Get", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Get), ctx, url, data,
	)
}

// GetAllPools mocks base method.
func (m *MockOceanstorClientInterface) GetAllPools(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetAllPools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllPools", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetAllPools), ctx,
	)
}

// GetAllQos mocks base method.
func (m *MockOceanstorClientInterface) GetAllQos(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQos", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQos indicates an expected call of GetAllQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetAllQos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetAllQos), ctx,
	)
}

// GetAllRemoteDevices mocks base method.
func (m *MockOceanstorClientInterface) GetAllRemoteDevices(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemoteDevices", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRemoteDevices indicates an expected call of GetAllRemoteDevices.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetAllRemoteDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllRemoteDevices", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetAllRemoteDevices), ctx,
	)
}

// GetApplicationTypeByName mocks base method.
func (m *MockOceanstorClientInterface) GetApplicationTypeByName(ctx context.Context, appType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTypeByName", ctx, appType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTypeByName indicates an expected call of GetApplicationTypeByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetApplicationTypeByName(ctx, appType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetApplicationTypeByName",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetApplicationTypeByName), ctx, appType,
	)
}

// GetBackendID mocks base method.
func (m *MockOceanstorClientInterface) GetBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendID indicates an expected call of GetBackendID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetBackendID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetBackendID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetBackendID),
	)
}

// GetClonePairInfo mocks base method.
func (m *MockOceanstorClientInterface) GetClonePairInfo(ctx context.Context, clonePairID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClonePairInfo", ctx, clonePairID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClonePairInfo indicates an expected call of GetClonePairInfo.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetClonePairInfo(ctx, clonePairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetClonePairInfo", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetClonePairInfo), ctx,
		clonePairID,
	)
}

// GetCurrentLif mocks base method.
func (m *MockOceanstorClientInterface) GetCurrentLif(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLif", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentLif indicates an expected call of GetCurrentLif.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetCurrentLif(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetCurrentLif", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetCurrentLif), ctx,
	)
}

// GetCurrentLifWwn mocks base method.
func (m *MockOceanstorClientInterface) GetCurrentLifWwn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLifWwn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentLifWwn indicates an expected call of GetCurrentLifWwn.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetCurrentLifWwn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetCurrentLifWwn", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetCurrentLifWwn),
	)
}

// GetCurrentSiteWwn mocks base method.
func (m *MockOceanstorClientInterface) GetCurrentSiteWwn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSiteWwn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentSiteWwn indicates an expected call of GetCurrentSiteWwn.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetCurrentSiteWwn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetCurrentSiteWwn", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetCurrentSiteWwn),
	)
}

// GetDTreeByName mocks base method.
func (m *MockOceanstorClientInterface) GetDTreeByName(
	ctx context.Context, parentID, parentName, vStoreID, name string,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDTreeByName", ctx, parentID, parentName, vStoreID, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDTreeByName indicates an expected call of GetDTreeByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetDTreeByName(ctx, parentID, parentName, vStoreID,
	name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetDTreeByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetDTreeByName), ctx, parentID,
		parentName, vStoreID, name,
	)
}

// GetDeviceSN mocks base method.
func (m *MockOceanstorClientInterface) GetDeviceSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceSN indicates an expected call of GetDeviceSN.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetDeviceSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetDeviceSN", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetDeviceSN),
	)
}

// GetFCHostLink mocks base method.
func (m *MockOceanstorClientInterface) GetFCHostLink(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCHostLink", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCHostLink indicates an expected call of GetFCHostLink.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFCHostLink(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCHostLink", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFCHostLink), ctx, hostID,
	)
}

// GetFCInitiator mocks base method.
func (m *MockOceanstorClientInterface) GetFCInitiator(ctx context.Context, wwn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCInitiator", ctx, wwn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCInitiator indicates an expected call of GetFCInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFCInitiator(ctx, wwn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFCInitiator), ctx, wwn,
	)
}

// GetFCInitiatorByID mocks base method.
func (m *MockOceanstorClientInterface) GetFCInitiatorByID(ctx context.Context, wwn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCInitiatorByID", ctx, wwn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCInitiatorByID indicates an expected call of GetFCInitiatorByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFCInitiatorByID(ctx, wwn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCInitiatorByID",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFCInitiatorByID), ctx, wwn)
}

// GetFCTargetWWNs mocks base method.
func (m *MockOceanstorClientInterface) GetFCTargetWWNs(ctx context.Context, initiatorWWN string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCTargetWWNs", ctx, initiatorWWN)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCTargetWWNs indicates an expected call of GetFCTargetWWNs.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFCTargetWWNs(ctx, initiatorWWN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFCTargetWWNs", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFCTargetWWNs), ctx,
		initiatorWWN,
	)
}

// GetFSHyperMetroDomain mocks base method.
func (m *MockOceanstorClientInterface) GetFSHyperMetroDomain(ctx context.Context, domainName string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSHyperMetroDomain", ctx, domainName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSHyperMetroDomain indicates an expected call of GetFSHyperMetroDomain.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFSHyperMetroDomain(ctx, domainName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFSHyperMetroDomain", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFSHyperMetroDomain),
		ctx, domainName,
	)
}

// GetFSSnapshotByName mocks base method.
func (m *MockOceanstorClientInterface) GetFSSnapshotByName(
	ctx context.Context, parentID, snapshotName string,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSSnapshotByName", ctx, parentID, snapshotName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSSnapshotByName indicates an expected call of GetFSSnapshotByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFSSnapshotByName(ctx, parentID, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFSSnapshotByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFSSnapshotByName), ctx,
		parentID, snapshotName,
	)
}

// GetFSSnapshotCountByParentId mocks base method.
func (m *MockOceanstorClientInterface) GetFSSnapshotCountByParentId(ctx context.Context, ParentId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFSSnapshotCountByParentId", ctx, ParentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFSSnapshotCountByParentId indicates an expected call of GetFSSnapshotCountByParentId.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFSSnapshotCountByParentId(ctx, ParentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFSSnapshotCountByParentId",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFSSnapshotCountByParentId), ctx, ParentId,
	)
}

// GetFileSystemByID mocks base method.
func (m *MockOceanstorClientInterface) GetFileSystemByID(ctx context.Context, id string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByID", ctx, id)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByID indicates an expected call of GetFileSystemByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFileSystemByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFileSystemByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFileSystemByID), ctx, id,
	)
}

// GetFileSystemByName mocks base method.
func (m *MockOceanstorClientInterface) GetFileSystemByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByName indicates an expected call of GetFileSystemByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetFileSystemByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetFileSystemByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetFileSystemByName), ctx,
		name,
	)
}

// GetHostByName mocks base method.
func (m *MockOceanstorClientInterface) GetHostByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByName indicates an expected call of GetHostByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHostByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHostByName), ctx, name,
	)
}

// GetHostGroupByName mocks base method.
func (m *MockOceanstorClientInterface) GetHostGroupByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupByName indicates an expected call of GetHostGroupByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHostGroupByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostGroupByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHostGroupByName), ctx,
		name,
	)
}

// GetHostLunId mocks base method.
func (m *MockOceanstorClientInterface) GetHostLunId(ctx context.Context, hostID, lunID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostLunId", ctx, hostID, lunID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostLunId indicates an expected call of GetHostLunId.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHostLunId(ctx, hostID, lunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHostLunId", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHostLunId), ctx, hostID, lunID,
	)
}

// GetHyperMetroDomain mocks base method.
func (m *MockOceanstorClientInterface) GetHyperMetroDomain(ctx context.Context, domainID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperMetroDomain", ctx, domainID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperMetroDomain indicates an expected call of GetHyperMetroDomain.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHyperMetroDomain(ctx, domainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHyperMetroDomain", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHyperMetroDomain), ctx,
		domainID,
	)
}

// GetHyperMetroDomainByName mocks base method.
func (m *MockOceanstorClientInterface) GetHyperMetroDomainByName(ctx context.Context, name string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperMetroDomainByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperMetroDomainByName indicates an expected call of GetHyperMetroDomainByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHyperMetroDomainByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHyperMetroDomainByName",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHyperMetroDomainByName), ctx, name,
	)
}

// GetHyperMetroPair mocks base method.
func (m *MockOceanstorClientInterface) GetHyperMetroPair(ctx context.Context, pairID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperMetroPair", ctx, pairID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperMetroPair indicates an expected call of GetHyperMetroPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHyperMetroPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHyperMetroPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHyperMetroPair), ctx,
		pairID,
	)
}

// GetHyperMetroPairByLocalObjID mocks base method.
func (m *MockOceanstorClientInterface) GetHyperMetroPairByLocalObjID(ctx context.Context, objID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHyperMetroPairByLocalObjID", ctx, objID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHyperMetroPairByLocalObjID indicates an expected call of GetHyperMetroPairByLocalObjID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetHyperMetroPairByLocalObjID(ctx, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetHyperMetroPairByLocalObjID",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetHyperMetroPairByLocalObjID), ctx, objID,
	)
}

// GetISCSIHostLink mocks base method.
func (m *MockOceanstorClientInterface) GetISCSIHostLink(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISCSIHostLink", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISCSIHostLink indicates an expected call of GetISCSIHostLink.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetISCSIHostLink(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetISCSIHostLink", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetISCSIHostLink), ctx, hostID,
	)
}

// GetIscsiInitiator mocks base method.
func (m *MockOceanstorClientInterface) GetIscsiInitiator(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiInitiator indicates an expected call of GetIscsiInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetIscsiInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetIscsiInitiator), ctx,
		initiator,
	)
}

// GetIscsiInitiatorByID mocks base method.
func (m *MockOceanstorClientInterface) GetIscsiInitiatorByID(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiInitiatorByID", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiInitiatorByID indicates an expected call of GetIscsiInitiatorByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetIscsiInitiatorByID(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiInitiatorByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetIscsiInitiatorByID),
		ctx, initiator,
	)
}

// GetIscsiTgtPort mocks base method.
func (m *MockOceanstorClientInterface) GetIscsiTgtPort(ctx context.Context) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIscsiTgtPort", ctx)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIscsiTgtPort indicates an expected call of GetIscsiTgtPort.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetIscsiTgtPort(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetIscsiTgtPort", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetIscsiTgtPort), ctx,
	)
}

// GetLicenseFeature mocks base method.
func (m *MockOceanstorClientInterface) GetLicenseFeature(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseFeature", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseFeature indicates an expected call of GetLicenseFeature.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLicenseFeature(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLicenseFeature", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLicenseFeature), ctx,
	)
}

// GetLogicPort mocks base method.
func (m *MockOceanstorClientInterface) GetLogicPort(ctx context.Context, addr string) (*client.Lif, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicPort", ctx, addr)
	ret0, _ := ret[0].(*client.Lif)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicPort indicates an expected call of GetLogicPort.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLogicPort(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLogicPort", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLogicPort), ctx, addr,
	)
}

// GetLunByID mocks base method.
func (m *MockOceanstorClientInterface) GetLunByID(ctx context.Context, id string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunByID", ctx, id)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunByID indicates an expected call of GetLunByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunByID), ctx, id,
	)
}

// GetLunByName mocks base method.
func (m *MockOceanstorClientInterface) GetLunByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunByName indicates an expected call of GetLunByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunByName), ctx, name,
	)
}

// GetLunCopyByID mocks base method.
func (m *MockOceanstorClientInterface) GetLunCopyByID(ctx context.Context, lunCopyID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunCopyByID", ctx, lunCopyID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunCopyByID indicates an expected call of GetLunCopyByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunCopyByID(ctx, lunCopyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunCopyByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunCopyByID), ctx, lunCopyID,
	)
}

// GetLunCopyByName mocks base method.
func (m *MockOceanstorClientInterface) GetLunCopyByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunCopyByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunCopyByName indicates an expected call of GetLunCopyByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunCopyByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunCopyByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunCopyByName), ctx, name,
	)
}

// GetLunCountOfHost mocks base method.
func (m *MockOceanstorClientInterface) GetLunCountOfHost(ctx context.Context, hostID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunCountOfHost", ctx, hostID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunCountOfHost indicates an expected call of GetLunCountOfHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunCountOfHost(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunCountOfHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunCountOfHost), ctx,
		hostID,
	)
}

// GetLunCountOfMapping mocks base method.
func (m *MockOceanstorClientInterface) GetLunCountOfMapping(ctx context.Context, mappingID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunCountOfMapping", ctx, mappingID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunCountOfMapping indicates an expected call of GetLunCountOfMapping.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunCountOfMapping(ctx, mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunCountOfMapping", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunCountOfMapping), ctx,
		mappingID,
	)
}

// GetLunGroupByName mocks base method.
func (m *MockOceanstorClientInterface) GetLunGroupByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunGroupByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunGroupByName indicates an expected call of GetLunGroupByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunGroupByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunGroupByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunGroupByName), ctx, name,
	)
}

// GetLunSnapshotByName mocks base method.
func (m *MockOceanstorClientInterface) GetLunSnapshotByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunSnapshotByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunSnapshotByName indicates an expected call of GetLunSnapshotByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetLunSnapshotByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetLunSnapshotByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetLunSnapshotByName), ctx,
		name,
	)
}

// GetMappingByName mocks base method.
func (m *MockOceanstorClientInterface) GetMappingByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappingByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMappingByName indicates an expected call of GetMappingByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetMappingByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetMappingByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetMappingByName), ctx, name,
	)
}

// GetNFSServiceSetting mocks base method.
func (m *MockOceanstorClientInterface) GetNFSServiceSetting(ctx context.Context) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFSServiceSetting", ctx)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFSServiceSetting indicates an expected call of GetNFSServiceSetting.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetNFSServiceSetting(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNFSServiceSetting", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetNFSServiceSetting), ctx,
	)
}

// GetNfsShareAccess mocks base method.
func (m *MockOceanstorClientInterface) GetNfsShareAccess(
	ctx context.Context, parentID, name, vStoreID string,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccess", ctx, parentID, name, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccess indicates an expected call of GetNfsShareAccess.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetNfsShareAccess(ctx, parentID, name, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNfsShareAccess", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetNfsShareAccess), ctx,
		parentID, name, vStoreID,
	)
}

// GetNfsShareAccessCount mocks base method.
func (m *MockOceanstorClientInterface) GetNfsShareAccessCount(ctx context.Context, parentID, vStoreID string) (
	int64, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccessCount", ctx, parentID, vStoreID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccessCount indicates an expected call of GetNfsShareAccessCount.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetNfsShareAccessCount(ctx, parentID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNfsShareAccessCount", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetNfsShareAccessCount),
		ctx, parentID, vStoreID,
	)
}

// GetNfsShareAccessRange mocks base method.
func (m *MockOceanstorClientInterface) GetNfsShareAccessRange(
	ctx context.Context, parentID, vStoreID string, startRange, endRange int64,
) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccessRange", ctx, parentID, vStoreID, startRange, endRange)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccessRange indicates an expected call of GetNfsShareAccessRange.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetNfsShareAccessRange(ctx, parentID, vStoreID, startRange,
	endRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNfsShareAccessRange", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetNfsShareAccessRange),
		ctx, parentID, vStoreID, startRange, endRange,
	)
}

// GetNfsShareByPath mocks base method.
func (m *MockOceanstorClientInterface) GetNfsShareByPath(ctx context.Context, path, vStoreID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareByPath", ctx, path, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareByPath indicates an expected call of GetNfsShareByPath.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetNfsShareByPath(ctx, path, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetNfsShareByPath", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetNfsShareByPath), ctx, path,
		vStoreID,
	)
}

// GetPoolByName mocks base method.
func (m *MockOceanstorClientInterface) GetPoolByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolByName indicates an expected call of GetPoolByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetPoolByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetPoolByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetPoolByName), ctx, name,
	)
}

// GetQosByID mocks base method.
func (m *MockOceanstorClientInterface) GetQosByID(ctx context.Context, qosID, vStoreID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByID", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByID indicates an expected call of GetQosByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetQosByID(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetQosByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetQosByID), ctx, qosID, vStoreID,
	)
}

// GetQosByName mocks base method.
func (m *MockOceanstorClientInterface) GetQosByName(ctx context.Context, name, vStoreID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByName", ctx, name, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByName indicates an expected call of GetQosByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetQosByName(ctx, name, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetQosByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetQosByName), ctx, name, vStoreID,
	)
}

// GetQuota mocks base method.
func (m *MockOceanstorClientInterface) GetQuota(
	ctx context.Context, quotaID, vStoreID string, spaceUnitType uint32,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", ctx, quotaID, vStoreID, spaceUnitType)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetQuota(ctx, quotaID, vStoreID, spaceUnitType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetQuota", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetQuota), ctx, quotaID, vStoreID,
		spaceUnitType,
	)
}

// GetRemoteDeviceBySN mocks base method.
func (m *MockOceanstorClientInterface) GetRemoteDeviceBySN(ctx context.Context, sn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteDeviceBySN", ctx, sn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteDeviceBySN indicates an expected call of GetRemoteDeviceBySN.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetRemoteDeviceBySN(ctx, sn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRemoteDeviceBySN", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetRemoteDeviceBySN), ctx,
		sn,
	)
}

// GetReplicationPairByID mocks base method.
func (m *MockOceanstorClientInterface) GetReplicationPairByID(ctx context.Context, pairID string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationPairByID", ctx, pairID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationPairByID indicates an expected call of GetReplicationPairByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetReplicationPairByID(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetReplicationPairByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetReplicationPairByID),
		ctx, pairID,
	)
}

// GetReplicationPairByResID mocks base method.
func (m *MockOceanstorClientInterface) GetReplicationPairByResID(
	ctx context.Context, resID string, resType int,
) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationPairByResID", ctx, resID, resType)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationPairByResID indicates an expected call of GetReplicationPairByResID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetReplicationPairByResID(ctx, resID, resType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetReplicationPairByResID",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetReplicationPairByResID), ctx, resID, resType,
	)
}

// GetReplicationvStorePairByvStore mocks base method.
func (m *MockOceanstorClientInterface) GetReplicationvStorePairByvStore(
	ctx context.Context, vStoreID string,
) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationvStorePairByvStore", ctx, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationvStorePairByvStore indicates an expected call of GetReplicationvStorePairByvStore.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetReplicationvStorePairByvStore(ctx, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetReplicationvStorePairByvStore",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetReplicationvStorePairByvStore), ctx, vStoreID,
	)
}

// GetRequest mocks base method.
func (m *MockOceanstorClientInterface) GetRequest(
	ctx context.Context, method, url string, data map[string]any,
) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, method, url, data)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetRequest(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRequest", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetRequest), ctx, method, url, data,
	)
}

// GetRoCEInitiator mocks base method.
func (m *MockOceanstorClientInterface) GetRoCEInitiator(ctx context.Context, initiator string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEInitiator", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEInitiator indicates an expected call of GetRoCEInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetRoCEInitiator(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetRoCEInitiator), ctx,
		initiator,
	)
}

// GetRoCEInitiatorByID mocks base method.
func (m *MockOceanstorClientInterface) GetRoCEInitiatorByID(ctx context.Context, initiator string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEInitiatorByID", ctx, initiator)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEInitiatorByID indicates an expected call of GetRoCEInitiatorByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetRoCEInitiatorByID(ctx, initiator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEInitiatorByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetRoCEInitiatorByID), ctx,
		initiator,
	)
}

// GetRoCEPortalByIP mocks base method.
func (m *MockOceanstorClientInterface) GetRoCEPortalByIP(ctx context.Context, tgtPortal string) (
	map[string]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoCEPortalByIP", ctx, tgtPortal)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoCEPortalByIP indicates an expected call of GetRoCEPortalByIP.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetRoCEPortalByIP(ctx, tgtPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetRoCEPortalByIP", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetRoCEPortalByIP), ctx,
		tgtPortal,
	)
}

// GetStorageVersion mocks base method.
func (m *MockOceanstorClientInterface) GetStorageVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageVersion indicates an expected call of GetStorageVersion.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetStorageVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetStorageVersion", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetStorageVersion),
	)
}

// GetSystem mocks base method.
func (m *MockOceanstorClientInterface) GetSystem(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystem", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystem indicates an expected call of GetSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetSystem(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetSystem), ctx,
	)
}

// GetSystemUTCTime mocks base method.
func (m *MockOceanstorClientInterface) GetSystemUTCTime(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemUTCTime", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemUTCTime indicates an expected call of GetSystemUTCTime.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetSystemUTCTime(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetSystemUTCTime", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetSystemUTCTime), ctx,
	)
}

// GetVStorePairs mocks base method.
func (m *MockOceanstorClientInterface) GetVStorePairs(ctx context.Context) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVStorePairs", ctx)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVStorePairs indicates an expected call of GetVStorePairs.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetVStorePairs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetVStorePairs", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetVStorePairs), ctx,
	)
}

// GetvStoreByName mocks base method.
func (m *MockOceanstorClientInterface) GetvStoreByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetvStoreByName indicates an expected call of GetvStoreByName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetvStoreByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetvStoreByName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetvStoreByName), ctx, name,
	)
}

// GetvStoreID mocks base method.
func (m *MockOceanstorClientInterface) GetvStoreID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetvStoreID indicates an expected call of GetvStoreID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetvStoreID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetvStoreID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetvStoreID),
	)
}

// GetvStoreName mocks base method.
func (m *MockOceanstorClientInterface) GetvStoreName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetvStoreName indicates an expected call of GetvStoreName.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetvStoreName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetvStoreName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetvStoreName),
	)
}

// GetvStorePairByID mocks base method.
func (m *MockOceanstorClientInterface) GetvStorePairByID(ctx context.Context, pairID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStorePairByID", ctx, pairID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetvStorePairByID indicates an expected call of GetvStorePairByID.
func (mr *MockOceanstorClientInterfaceMockRecorder) GetvStorePairByID(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetvStorePairByID", reflect.TypeOf((*MockOceanstorClientInterface)(nil).GetvStorePairByID), ctx,
		pairID,
	)
}

// Login mocks base method.
func (m *MockOceanstorClientInterface) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockOceanstorClientInterfaceMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Login", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Login), ctx,
	)
}

// Logout mocks base method.
func (m *MockOceanstorClientInterface) Logout(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout.
func (mr *MockOceanstorClientInterfaceMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Logout", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Logout), ctx,
	)
}

// MakeLunName mocks base method.
func (m *MockOceanstorClientInterface) MakeLunName(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLunName", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeLunName indicates an expected call of MakeLunName.
func (mr *MockOceanstorClientInterfaceMockRecorder) MakeLunName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "MakeLunName", reflect.TypeOf((*MockOceanstorClientInterface)(nil).MakeLunName), name,
	)
}

// Post mocks base method.
func (m *MockOceanstorClientInterface) Post(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockOceanstorClientInterfaceMockRecorder) Post(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Post", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Post), ctx, url, data,
	)
}

// Put mocks base method.
func (m *MockOceanstorClientInterface) Put(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOceanstorClientInterfaceMockRecorder) Put(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "Put", reflect.TypeOf((*MockOceanstorClientInterface)(nil).Put), ctx, url, data,
	)
}

// QueryAssociateHostGroup mocks base method.
func (m *MockOceanstorClientInterface) QueryAssociateHostGroup(ctx context.Context, objType int, objID string) (
	[]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssociateHostGroup", ctx, objType, objID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssociateHostGroup indicates an expected call of QueryAssociateHostGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) QueryAssociateHostGroup(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryAssociateHostGroup",
		reflect.TypeOf((*MockOceanstorClientInterface)(nil).QueryAssociateHostGroup), ctx, objType, objID,
	)
}

// QueryAssociateLunGroup mocks base method.
func (m *MockOceanstorClientInterface) QueryAssociateLunGroup(ctx context.Context, objType int, objID string) (
	[]any, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssociateLunGroup", ctx, objType, objID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssociateLunGroup indicates an expected call of QueryAssociateLunGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) QueryAssociateLunGroup(ctx, objType, objID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryAssociateLunGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).QueryAssociateLunGroup),
		ctx, objType, objID,
	)
}

// QueryFCInitiatorByHost mocks base method.
func (m *MockOceanstorClientInterface) QueryFCInitiatorByHost(ctx context.Context, hostID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFCInitiatorByHost", ctx, hostID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFCInitiatorByHost indicates an expected call of QueryFCInitiatorByHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) QueryFCInitiatorByHost(ctx, hostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "QueryFCInitiatorByHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).QueryFCInitiatorByHost),
		ctx, hostID,
	)
}

// ReLogin mocks base method.
func (m *MockOceanstorClientInterface) ReLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockOceanstorClientInterfaceMockRecorder) ReLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "ReLogin", reflect.TypeOf((*MockOceanstorClientInterface)(nil).ReLogin), ctx,
	)
}

// RemoveGroupFromMapping mocks base method.
func (m *MockOceanstorClientInterface) RemoveGroupFromMapping(
	ctx context.Context, groupType int, groupID, mappingID string,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupFromMapping", ctx, groupType, groupID, mappingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroupFromMapping indicates an expected call of RemoveGroupFromMapping.
func (mr *MockOceanstorClientInterfaceMockRecorder) RemoveGroupFromMapping(ctx, groupType, groupID,
	mappingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveGroupFromMapping", reflect.TypeOf((*MockOceanstorClientInterface)(nil).RemoveGroupFromMapping),
		ctx, groupType, groupID, mappingID,
	)
}

// RemoveHostFromGroup mocks base method.
func (m *MockOceanstorClientInterface) RemoveHostFromGroup(ctx context.Context, hostID, hostGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostFromGroup", ctx, hostID, hostGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostFromGroup indicates an expected call of RemoveHostFromGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) RemoveHostFromGroup(ctx, hostID, hostGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveHostFromGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).RemoveHostFromGroup), ctx,
		hostID, hostGroupID,
	)
}

// RemoveLunFromGroup mocks base method.
func (m *MockOceanstorClientInterface) RemoveLunFromGroup(ctx context.Context, lunID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLunFromGroup", ctx, lunID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLunFromGroup indicates an expected call of RemoveLunFromGroup.
func (mr *MockOceanstorClientInterfaceMockRecorder) RemoveLunFromGroup(ctx, lunID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "RemoveLunFromGroup", reflect.TypeOf((*MockOceanstorClientInterface)(nil).RemoveLunFromGroup), ctx,
		lunID, groupID,
	)
}

// SafeBaseCall mocks base method.
func (m *MockOceanstorClientInterface) SafeBaseCall(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeBaseCall", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeBaseCall indicates an expected call of SafeBaseCall.
func (mr *MockOceanstorClientInterfaceMockRecorder) SafeBaseCall(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SafeBaseCall", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SafeBaseCall), ctx, method, url,
		data,
	)
}

// SafeCall mocks base method.
func (m *MockOceanstorClientInterface) SafeCall(
	ctx context.Context, method, url string, data map[string]any,
) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeCall", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeCall indicates an expected call of SafeCall.
func (mr *MockOceanstorClientInterfaceMockRecorder) SafeCall(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SafeCall", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SafeCall), ctx, method, url, data,
	)
}

// SafeDelete mocks base method.
func (m *MockOceanstorClientInterface) SafeDelete(ctx context.Context, url string, data map[string]any) (
	base.Response, error,
) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeDelete", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeDelete indicates an expected call of SafeDelete.
func (mr *MockOceanstorClientInterfaceMockRecorder) SafeDelete(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SafeDelete", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SafeDelete), ctx, url, data,
	)
}

// SafeDeleteFileSystem mocks base method.
func (m *MockOceanstorClientInterface) SafeDeleteFileSystem(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeDeleteFileSystem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeDeleteFileSystem indicates an expected call of SafeDeleteFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) SafeDeleteFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SafeDeleteFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SafeDeleteFileSystem), ctx,
		params,
	)
}

// SafeDeleteNfsShare mocks base method.
func (m *MockOceanstorClientInterface) SafeDeleteNfsShare(ctx context.Context, id, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeDeleteNfsShare", ctx, id, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeDeleteNfsShare indicates an expected call of SafeDeleteNfsShare.
func (mr *MockOceanstorClientInterfaceMockRecorder) SafeDeleteNfsShare(ctx, id, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SafeDeleteNfsShare", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SafeDeleteNfsShare), ctx, id,
		vStoreID,
	)
}

// SetSystemInfo mocks base method.
func (m *MockOceanstorClientInterface) SetSystemInfo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSystemInfo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSystemInfo indicates an expected call of SetSystemInfo.
func (mr *MockOceanstorClientInterfaceMockRecorder) SetSystemInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SetSystemInfo", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SetSystemInfo), ctx,
	)
}

// SplitCloneFS mocks base method.
func (m *MockOceanstorClientInterface) SplitCloneFS(
	ctx context.Context, fsID, vStoreId string, splitSpeed int, isDeleteParentSnapshot bool,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitCloneFS", ctx, fsID, vStoreId, splitSpeed, isDeleteParentSnapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// SplitCloneFS indicates an expected call of SplitCloneFS.
func (mr *MockOceanstorClientInterfaceMockRecorder) SplitCloneFS(ctx, fsID, vStoreId, splitSpeed,
	isDeleteParentSnapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SplitCloneFS", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SplitCloneFS), ctx, fsID, vStoreId,
		splitSpeed, isDeleteParentSnapshot,
	)
}

// SplitReplicationPair mocks base method.
func (m *MockOceanstorClientInterface) SplitReplicationPair(ctx context.Context, pairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitReplicationPair", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SplitReplicationPair indicates an expected call of SplitReplicationPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) SplitReplicationPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SplitReplicationPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SplitReplicationPair), ctx,
		pairID,
	)
}

// StartLunCopy mocks base method.
func (m *MockOceanstorClientInterface) StartLunCopy(ctx context.Context, lunCopyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLunCopy", ctx, lunCopyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLunCopy indicates an expected call of StartLunCopy.
func (mr *MockOceanstorClientInterfaceMockRecorder) StartLunCopy(ctx, lunCopyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "StartLunCopy", reflect.TypeOf((*MockOceanstorClientInterface)(nil).StartLunCopy), ctx, lunCopyID,
	)
}

// StopCloneFSSplit mocks base method.
func (m *MockOceanstorClientInterface) StopCloneFSSplit(ctx context.Context, fsID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCloneFSSplit", ctx, fsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCloneFSSplit indicates an expected call of StopCloneFSSplit.
func (mr *MockOceanstorClientInterfaceMockRecorder) StopCloneFSSplit(ctx, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "StopCloneFSSplit", reflect.TypeOf((*MockOceanstorClientInterface)(nil).StopCloneFSSplit), ctx, fsID,
	)
}

// StopHyperMetroPair mocks base method.
func (m *MockOceanstorClientInterface) StopHyperMetroPair(ctx context.Context, pairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopHyperMetroPair", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopHyperMetroPair indicates an expected call of StopHyperMetroPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) StopHyperMetroPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "StopHyperMetroPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).StopHyperMetroPair), ctx,
		pairID,
	)
}

// StopLunCopy mocks base method.
func (m *MockOceanstorClientInterface) StopLunCopy(ctx context.Context, lunCopyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLunCopy", ctx, lunCopyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopLunCopy indicates an expected call of StopLunCopy.
func (mr *MockOceanstorClientInterfaceMockRecorder) StopLunCopy(ctx, lunCopyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "StopLunCopy", reflect.TypeOf((*MockOceanstorClientInterface)(nil).StopLunCopy), ctx, lunCopyID,
	)
}

// SyncClonePair mocks base method.
func (m *MockOceanstorClientInterface) SyncClonePair(ctx context.Context, clonePairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncClonePair", ctx, clonePairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncClonePair indicates an expected call of SyncClonePair.
func (mr *MockOceanstorClientInterfaceMockRecorder) SyncClonePair(ctx, clonePairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SyncClonePair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SyncClonePair), ctx, clonePairID,
	)
}

// SyncHyperMetroPair mocks base method.
func (m *MockOceanstorClientInterface) SyncHyperMetroPair(ctx context.Context, pairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncHyperMetroPair", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncHyperMetroPair indicates an expected call of SyncHyperMetroPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) SyncHyperMetroPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SyncHyperMetroPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SyncHyperMetroPair), ctx,
		pairID,
	)
}

// SyncReplicationPair mocks base method.
func (m *MockOceanstorClientInterface) SyncReplicationPair(ctx context.Context, pairID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncReplicationPair", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncReplicationPair indicates an expected call of SyncReplicationPair.
func (mr *MockOceanstorClientInterfaceMockRecorder) SyncReplicationPair(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "SyncReplicationPair", reflect.TypeOf((*MockOceanstorClientInterface)(nil).SyncReplicationPair), ctx,
		pairID,
	)
}

// UpdateFCInitiator mocks base method.
func (m *MockOceanstorClientInterface) UpdateFCInitiator(ctx context.Context, wwn string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFCInitiator", ctx, wwn, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFCInitiator indicates an expected call of UpdateFCInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateFCInitiator(ctx, wwn, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateFCInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateFCInitiator), ctx, wwn,
		alua,
	)
}

// UpdateFileSystem mocks base method.
func (m *MockOceanstorClientInterface) UpdateFileSystem(ctx context.Context, fsID string, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", ctx, fsID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateFileSystem(ctx, fsID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateFileSystem), ctx, fsID,
		params,
	)
}

// UpdateHost mocks base method.
func (m *MockOceanstorClientInterface) UpdateHost(ctx context.Context, id string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", ctx, id, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateHost(ctx, id, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateHost", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateHost), ctx, id, alua,
	)
}

// UpdateIscsiInitiator mocks base method.
func (m *MockOceanstorClientInterface) UpdateIscsiInitiator(
	ctx context.Context, initiator string, alua map[string]any,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIscsiInitiator", ctx, initiator, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIscsiInitiator indicates an expected call of UpdateIscsiInitiator.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateIscsiInitiator(ctx, initiator, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateIscsiInitiator", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateIscsiInitiator), ctx,
		initiator, alua,
	)
}

// UpdateLun mocks base method.
func (m *MockOceanstorClientInterface) UpdateLun(ctx context.Context, lunID string, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLun", ctx, lunID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLun indicates an expected call of UpdateLun.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateLun(ctx, lunID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateLun", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateLun), ctx, lunID, params,
	)
}

// UpdateQos mocks base method.
func (m *MockOceanstorClientInterface) UpdateQos(
	ctx context.Context, qosID, vStoreID string, params map[string]any,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQos", ctx, qosID, vStoreID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQos indicates an expected call of UpdateQos.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateQos(ctx, qosID, vStoreID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateQos", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateQos), ctx, qosID, vStoreID,
		params,
	)
}

// UpdateQuota mocks base method.
func (m *MockOceanstorClientInterface) UpdateQuota(ctx context.Context, quotaID string, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuota", ctx, quotaID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuota indicates an expected call of UpdateQuota.
func (mr *MockOceanstorClientInterfaceMockRecorder) UpdateQuota(ctx, quotaID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateQuota", reflect.TypeOf((*MockOceanstorClientInterface)(nil).UpdateQuota), ctx, quotaID, params,
	)
}
