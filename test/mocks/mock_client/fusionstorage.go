/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/fusionstorage/client/client.go
//
// Generated by this command:
//
//	mockgen -source ./storage/fusionstorage/client/client.go -package mock_client \
//	-destination ./test/mocks/mock_client/fusionstorage.go IRestClient
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	client "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/fusionstorage/client"
	types "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/fusionstorage/types"
)

// MockIRestClient is a mock of IRestClient interface.
type MockIRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRestClientMockRecorder
	isgomock struct{}
}

// MockIRestClientMockRecorder is the mock recorder for MockIRestClient.
type MockIRestClientMockRecorder struct {
	mock *MockIRestClient
}

// NewMockIRestClient creates a new mock instance.
func NewMockIRestClient(ctrl *gomock.Controller) *MockIRestClient {
	mock := &MockIRestClient{ctrl: ctrl}
	mock.recorder = &MockIRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRestClient) EXPECT() *MockIRestClientMockRecorder {
	return m.recorder
}

// AddLunToHost mocks base method.
func (m *MockIRestClient) AddLunToHost(ctx context.Context, lunName, hostName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLunToHost", ctx, lunName, hostName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLunToHost indicates an expected call of AddLunToHost.
func (mr *MockIRestClientMockRecorder) AddLunToHost(ctx, lunName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLunToHost",
		reflect.TypeOf((*MockIRestClient)(nil).AddLunToHost), ctx, lunName, hostName)
}

// AddNfsShareAuthClient mocks base method.
func (m *MockIRestClient) AddNfsShareAuthClient(ctx context.Context, req *client.AddNfsShareAuthClientRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNfsShareAuthClient", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNfsShareAuthClient indicates an expected call of AddNfsShareAuthClient.
func (mr *MockIRestClientMockRecorder) AddNfsShareAuthClient(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNfsShareAuthClient",
		reflect.TypeOf((*MockIRestClient)(nil).AddNfsShareAuthClient), ctx, req)
}

// AddPortToHost mocks base method.
func (m *MockIRestClient) AddPortToHost(ctx context.Context, initiatorName, hostName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPortToHost", ctx, initiatorName, hostName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPortToHost indicates an expected call of AddPortToHost.
func (mr *MockIRestClientMockRecorder) AddPortToHost(ctx, initiatorName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPortToHost",
		reflect.TypeOf((*MockIRestClient)(nil).AddPortToHost), ctx, initiatorName, hostName)
}

// AllowNfsShareAccess mocks base method.
func (m *MockIRestClient) AllowNfsShareAccess(ctx context.Context, req *client.AllowNfsShareAccessRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowNfsShareAccess", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowNfsShareAccess indicates an expected call of AllowNfsShareAccess.
func (mr *MockIRestClientMockRecorder) AllowNfsShareAccess(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowNfsShareAccess",
		reflect.TypeOf((*MockIRestClient)(nil).AllowNfsShareAccess), ctx, req)
}

// AssociateConvergedQoSWithVolume mocks base method.
func (m *MockIRestClient) AssociateConvergedQoSWithVolume(ctx context.Context,
	req *types.AssociateConvergedQoSWithVolumeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateConvergedQoSWithVolume", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateConvergedQoSWithVolume indicates an expected call of AssociateConvergedQoSWithVolume.
func (mr *MockIRestClientMockRecorder) AssociateConvergedQoSWithVolume(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConvergedQoSWithVolume",
		reflect.TypeOf((*MockIRestClient)(nil).AssociateConvergedQoSWithVolume), ctx, req)
}

// AssociateQoSWithVolume mocks base method.
func (m *MockIRestClient) AssociateQoSWithVolume(ctx context.Context, volName, qosName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateQoSWithVolume", ctx, volName, qosName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateQoSWithVolume indicates an expected call of AssociateQoSWithVolume.
func (mr *MockIRestClientMockRecorder) AssociateQoSWithVolume(ctx, volName, qosName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateQoSWithVolume",
		reflect.TypeOf((*MockIRestClient)(nil).AssociateQoSWithVolume), ctx, volName, qosName)
}

// AttachVolume mocks base method.
func (m *MockIRestClient) AttachVolume(ctx context.Context, name, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", ctx, name, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockIRestClientMockRecorder) AttachVolume(ctx, name, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume",
		reflect.TypeOf((*MockIRestClient)(nil).AttachVolume), ctx, name, ip)
}

// CreateConvergedQoS mocks base method.
func (m *MockIRestClient) CreateConvergedQoS(ctx context.Context, req *types.CreateConvergedQoSReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConvergedQoS", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConvergedQoS indicates an expected call of CreateConvergedQoS.
func (mr *MockIRestClientMockRecorder) CreateConvergedQoS(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConvergedQoS",
		reflect.TypeOf((*MockIRestClient)(nil).CreateConvergedQoS), ctx, req)
}

// CreateDTree mocks base method.
func (m *MockIRestClient) CreateDTree(ctx context.Context,
	parentName, name, unixPermission string) (*client.DTreeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDTree", ctx, parentName, name, unixPermission)
	ret0, _ := ret[0].(*client.DTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDTree indicates an expected call of CreateDTree.
func (mr *MockIRestClientMockRecorder) CreateDTree(ctx, parentName, name, unixPermission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDTree",
		reflect.TypeOf((*MockIRestClient)(nil).CreateDTree), ctx, parentName, name, unixPermission)
}

// CreateDTreeNfsShare mocks base method.
func (m *MockIRestClient) CreateDTreeNfsShare(ctx context.Context,
	req *client.CreateDTreeNfsShareRequest) (*client.CreateDTreeNfsShareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDTreeNfsShare", ctx, req)
	ret0, _ := ret[0].(*client.CreateDTreeNfsShareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDTreeNfsShare indicates an expected call of CreateDTreeNfsShare.
func (mr *MockIRestClientMockRecorder) CreateDTreeNfsShare(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDTreeNfsShare",
		reflect.TypeOf((*MockIRestClient)(nil).CreateDTreeNfsShare), ctx, req)
}

// CreateDTreeQuota mocks base method.
func (m *MockIRestClient) CreateDTreeQuota(ctx context.Context, dTreeId string,
	capacity int64) (*client.DTreeQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDTreeQuota", ctx, dTreeId, capacity)
	ret0, _ := ret[0].(*client.DTreeQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDTreeQuota indicates an expected call of CreateDTreeQuota.
func (mr *MockIRestClientMockRecorder) CreateDTreeQuota(ctx, dTreeId, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDTreeQuota",
		reflect.TypeOf((*MockIRestClient)(nil).CreateDTreeQuota), ctx, dTreeId, capacity)
}

// CreateFileSystem mocks base method.
func (m *MockIRestClient) CreateFileSystem(ctx context.Context, params map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockIRestClientMockRecorder) CreateFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem",
		reflect.TypeOf((*MockIRestClient)(nil).CreateFileSystem), ctx, params)
}

// CreateHost mocks base method.
func (m *MockIRestClient) CreateHost(ctx context.Context, hostName string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, hostName, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockIRestClientMockRecorder) CreateHost(ctx, hostName, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost",
		reflect.TypeOf((*MockIRestClient)(nil).CreateHost), ctx, hostName, alua)
}

// CreateInitiator mocks base method.
func (m *MockIRestClient) CreateInitiator(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitiator", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInitiator indicates an expected call of CreateInitiator.
func (mr *MockIRestClientMockRecorder) CreateInitiator(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitiator",
		reflect.TypeOf((*MockIRestClient)(nil).CreateInitiator), ctx, name)
}

// CreateNfsShare mocks base method.
func (m *MockIRestClient) CreateNfsShare(ctx context.Context, params map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNfsShare", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfsShare indicates an expected call of CreateNfsShare.
func (mr *MockIRestClientMockRecorder) CreateNfsShare(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfsShare",
		reflect.TypeOf((*MockIRestClient)(nil).CreateNfsShare), ctx, params)
}

// CreateQoS mocks base method.
func (m *MockIRestClient) CreateQoS(ctx context.Context, qosName string, qosData map[string]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQoS", ctx, qosName, qosData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQoS indicates an expected call of CreateQoS.
func (mr *MockIRestClientMockRecorder) CreateQoS(ctx, qosName, qosData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQoS",
		reflect.TypeOf((*MockIRestClient)(nil).CreateQoS), ctx, qosName, qosData)
}

// CreateQuota mocks base method.
func (m *MockIRestClient) CreateQuota(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuota", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuota indicates an expected call of CreateQuota.
func (mr *MockIRestClientMockRecorder) CreateQuota(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuota",
		reflect.TypeOf((*MockIRestClient)(nil).CreateQuota), ctx, params)
}

// CreateSnapshot mocks base method.
func (m *MockIRestClient) CreateSnapshot(ctx context.Context, snapshotName, volName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, snapshotName, volName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockIRestClientMockRecorder) CreateSnapshot(ctx, snapshotName, volName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot",
		reflect.TypeOf((*MockIRestClient)(nil).CreateSnapshot), ctx, snapshotName, volName)
}

// CreateVolume mocks base method.
func (m *MockIRestClient) CreateVolume(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockIRestClientMockRecorder) CreateVolume(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume",
		reflect.TypeOf((*MockIRestClient)(nil).CreateVolume), ctx, params)
}

// CreateVolumeFromSnapshot mocks base method.
func (m *MockIRestClient) CreateVolumeFromSnapshot(ctx context.Context, volName string, volSize int64,
	snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeFromSnapshot", ctx, volName, volSize, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolumeFromSnapshot indicates an expected call of CreateVolumeFromSnapshot.
func (mr *MockIRestClientMockRecorder) CreateVolumeFromSnapshot(ctx, volName, volSize, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeFromSnapshot",
		reflect.TypeOf((*MockIRestClient)(nil).CreateVolumeFromSnapshot), ctx, volName, volSize, snapshotName)
}

// DeleteConvergedQoS mocks base method.
func (m *MockIRestClient) DeleteConvergedQoS(ctx context.Context, qosName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConvergedQoS", ctx, qosName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConvergedQoS indicates an expected call of DeleteConvergedQoS.
func (mr *MockIRestClientMockRecorder) DeleteConvergedQoS(ctx, qosName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConvergedQoS",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteConvergedQoS), ctx, qosName)
}

// DeleteDTree mocks base method.
func (m *MockIRestClient) DeleteDTree(ctx context.Context, dtreeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDTree", ctx, dtreeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDTree indicates an expected call of DeleteDTree.
func (mr *MockIRestClientMockRecorder) DeleteDTree(ctx, dtreeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDTree",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteDTree), ctx, dtreeId)
}

// DeleteDTreeNfsShare mocks base method.
func (m *MockIRestClient) DeleteDTreeNfsShare(ctx context.Context, shareId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDTreeNfsShare", ctx, shareId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDTreeNfsShare indicates an expected call of DeleteDTreeNfsShare.
func (mr *MockIRestClientMockRecorder) DeleteDTreeNfsShare(ctx, shareId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDTreeNfsShare",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteDTreeNfsShare), ctx, shareId)
}

// DeleteDTreeQuota mocks base method.
func (m *MockIRestClient) DeleteDTreeQuota(ctx context.Context, quotaId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDTreeQuota", ctx, quotaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDTreeQuota indicates an expected call of DeleteDTreeQuota.
func (mr *MockIRestClientMockRecorder) DeleteDTreeQuota(ctx, quotaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDTreeQuota",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteDTreeQuota), ctx, quotaId)
}

// DeleteFileSystem mocks base method.
func (m *MockIRestClient) DeleteFileSystem(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockIRestClientMockRecorder) DeleteFileSystem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteFileSystem), ctx, id)
}

// DeleteLunFromHost mocks base method.
func (m *MockIRestClient) DeleteLunFromHost(ctx context.Context, lunName, hostName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLunFromHost", ctx, lunName, hostName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLunFromHost indicates an expected call of DeleteLunFromHost.
func (mr *MockIRestClientMockRecorder) DeleteLunFromHost(ctx, lunName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLunFromHost",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteLunFromHost), ctx, lunName, hostName)
}

// DeleteNfsShare mocks base method.
func (m *MockIRestClient) DeleteNfsShare(ctx context.Context, id, accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShare", ctx, id, accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShare indicates an expected call of DeleteNfsShare.
func (mr *MockIRestClientMockRecorder) DeleteNfsShare(ctx, id, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNfsShare",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteNfsShare), ctx, id, accountId)
}

// DeleteNfsShareAccess mocks base method.
func (m *MockIRestClient) DeleteNfsShareAccess(ctx context.Context, accessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShareAccess", ctx, accessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShareAccess indicates an expected call of DeleteNfsShareAccess.
func (mr *MockIRestClientMockRecorder) DeleteNfsShareAccess(ctx, accessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNfsShareAccess",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteNfsShareAccess), ctx, accessID)
}

// DeleteQoS mocks base method.
func (m *MockIRestClient) DeleteQoS(ctx context.Context, qosName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQoS", ctx, qosName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQoS indicates an expected call of DeleteQoS.
func (mr *MockIRestClientMockRecorder) DeleteQoS(ctx, qosName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQoS",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteQoS), ctx, qosName)
}

// DeleteQuota mocks base method.
func (m *MockIRestClient) DeleteQuota(ctx context.Context, quotaID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuota", ctx, quotaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuota indicates an expected call of DeleteQuota.
func (mr *MockIRestClientMockRecorder) DeleteQuota(ctx, quotaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuota",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteQuota), ctx, quotaID)
}

// DeleteSnapshot mocks base method.
func (m *MockIRestClient) DeleteSnapshot(ctx context.Context, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockIRestClientMockRecorder) DeleteSnapshot(ctx, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteSnapshot), ctx, snapshotName)
}

// DeleteVolume mocks base method.
func (m *MockIRestClient) DeleteVolume(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockIRestClientMockRecorder) DeleteVolume(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume",
		reflect.TypeOf((*MockIRestClient)(nil).DeleteVolume), ctx, name)
}

// DetachVolume mocks base method.
func (m *MockIRestClient) DetachVolume(ctx context.Context, name, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", ctx, name, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockIRestClientMockRecorder) DetachVolume(ctx, name, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume",
		reflect.TypeOf((*MockIRestClient)(nil).DetachVolume), ctx, name, ip)
}

// DisassociateConvergedQoSWithVolume mocks base method.
func (m *MockIRestClient) DisassociateConvergedQoSWithVolume(ctx context.Context, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConvergedQoSWithVolume", ctx, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateConvergedQoSWithVolume indicates an expected call of DisassociateConvergedQoSWithVolume.
func (mr *MockIRestClientMockRecorder) DisassociateConvergedQoSWithVolume(ctx, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConvergedQoSWithVolume",
		reflect.TypeOf((*MockIRestClient)(nil).DisassociateConvergedQoSWithVolume), ctx, objectName)
}

// DisassociateQoSWithVolume mocks base method.
func (m *MockIRestClient) DisassociateQoSWithVolume(ctx context.Context, volName, qosName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateQoSWithVolume", ctx, volName, qosName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateQoSWithVolume indicates an expected call of DisassociateQoSWithVolume.
func (mr *MockIRestClientMockRecorder) DisassociateQoSWithVolume(ctx, volName, qosName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateQoSWithVolume",
		reflect.TypeOf((*MockIRestClient)(nil).DisassociateQoSWithVolume), ctx, volName, qosName)
}

// ExtendVolume mocks base method.
func (m *MockIRestClient) ExtendVolume(ctx context.Context, lunName string, newCapacity int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendVolume", ctx, lunName, newCapacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendVolume indicates an expected call of ExtendVolume.
func (mr *MockIRestClientMockRecorder) ExtendVolume(ctx, lunName, newCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVolume",
		reflect.TypeOf((*MockIRestClient)(nil).ExtendVolume), ctx, lunName, newCapacity)
}

// GetAccountIdByName mocks base method.
func (m *MockIRestClient) GetAccountIdByName(ctx context.Context, accountName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIdByName", ctx, accountName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdByName indicates an expected call of GetAccountIdByName.
func (mr *MockIRestClientMockRecorder) GetAccountIdByName(ctx, accountName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetAccountIdByName), ctx, accountName)
}

// GetAllAccounts mocks base method.
func (m *MockIRestClient) GetAllAccounts(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockIRestClientMockRecorder) GetAllAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts",
		reflect.TypeOf((*MockIRestClient)(nil).GetAllAccounts), ctx)
}

// GetAllPools mocks base method.
func (m *MockIRestClient) GetAllPools(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockIRestClientMockRecorder) GetAllPools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools",
		reflect.TypeOf((*MockIRestClient)(nil).GetAllPools), ctx)
}

// GetAssociateCountOfQoS mocks base method.
func (m *MockIRestClient) GetAssociateCountOfQoS(ctx context.Context, qosName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociateCountOfQoS", ctx, qosName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociateCountOfQoS indicates an expected call of GetAssociateCountOfQoS.
func (mr *MockIRestClientMockRecorder) GetAssociateCountOfQoS(ctx, qosName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociateCountOfQoS",
		reflect.TypeOf((*MockIRestClient)(nil).GetAssociateCountOfQoS), ctx, qosName)
}

// GetConvergedQoSNameByID mocks base method.
func (m *MockIRestClient) GetConvergedQoSNameByID(ctx context.Context, qosId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConvergedQoSNameByID", ctx, qosId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConvergedQoSNameByID indicates an expected call of GetConvergedQoSNameByID.
func (mr *MockIRestClientMockRecorder) GetConvergedQoSNameByID(ctx, qosId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConvergedQoSNameByID",
		reflect.TypeOf((*MockIRestClient)(nil).GetConvergedQoSNameByID), ctx, qosId)
}

// GetDTreeByName mocks base method.
func (m *MockIRestClient) GetDTreeByName(ctx context.Context, parentName, name string) (*client.DTreeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDTreeByName", ctx, parentName, name)
	ret0, _ := ret[0].(*client.DTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDTreeByName indicates an expected call of GetDTreeByName.
func (mr *MockIRestClientMockRecorder) GetDTreeByName(ctx, parentName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDTreeByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetDTreeByName), ctx, parentName, name)
}

// GetDTreeNfsShareByPath mocks base method.
func (m *MockIRestClient) GetDTreeNfsShareByPath(ctx context.Context,
	sharePath string) (*client.GetDTreeNfsShareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDTreeNfsShareByPath", ctx, sharePath)
	ret0, _ := ret[0].(*client.GetDTreeNfsShareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDTreeNfsShareByPath indicates an expected call of GetDTreeNfsShareByPath.
func (mr *MockIRestClientMockRecorder) GetDTreeNfsShareByPath(ctx, sharePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDTreeNfsShareByPath",
		reflect.TypeOf((*MockIRestClient)(nil).GetDTreeNfsShareByPath), ctx, sharePath)
}

// GetFileSystemByName mocks base method.
func (m *MockIRestClient) GetFileSystemByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByName indicates an expected call of GetFileSystemByName.
func (mr *MockIRestClientMockRecorder) GetFileSystemByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetFileSystemByName), ctx, name)
}

// GetHostByName mocks base method.
func (m *MockIRestClient) GetHostByName(ctx context.Context, hostName string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByName", ctx, hostName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByName indicates an expected call of GetHostByName.
func (mr *MockIRestClientMockRecorder) GetHostByName(ctx, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetHostByName), ctx, hostName)
}

// GetHostLunId mocks base method.
func (m *MockIRestClient) GetHostLunId(ctx context.Context, hostName, lunName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostLunId", ctx, hostName, lunName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostLunId indicates an expected call of GetHostLunId.
func (mr *MockIRestClientMockRecorder) GetHostLunId(ctx, hostName, lunName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostLunId",
		reflect.TypeOf((*MockIRestClient)(nil).GetHostLunId), ctx, hostName, lunName)
}

// GetInitiatorByName mocks base method.
func (m *MockIRestClient) GetInitiatorByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiatorByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiatorByName indicates an expected call of GetInitiatorByName.
func (mr *MockIRestClientMockRecorder) GetInitiatorByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiatorByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetInitiatorByName), ctx, name)
}

// GetNFSServiceSetting mocks base method.
func (m *MockIRestClient) GetNFSServiceSetting(ctx context.Context) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFSServiceSetting", ctx)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFSServiceSetting indicates an expected call of GetNFSServiceSetting.
func (mr *MockIRestClientMockRecorder) GetNFSServiceSetting(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFSServiceSetting",
		reflect.TypeOf((*MockIRestClient)(nil).GetNFSServiceSetting), ctx)
}

// GetNfsShareAccess mocks base method.
func (m *MockIRestClient) GetNfsShareAccess(ctx context.Context, shareID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccess", ctx, shareID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccess indicates an expected call of GetNfsShareAccess.
func (mr *MockIRestClientMockRecorder) GetNfsShareAccess(ctx, shareID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareAccess",
		reflect.TypeOf((*MockIRestClient)(nil).GetNfsShareAccess), ctx, shareID)
}

// GetNfsShareByPath mocks base method.
func (m *MockIRestClient) GetNfsShareByPath(ctx context.Context, path, accountId string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareByPath", ctx, path, accountId)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareByPath indicates an expected call of GetNfsShareByPath.
func (mr *MockIRestClientMockRecorder) GetNfsShareByPath(ctx, path, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareByPath",
		reflect.TypeOf((*MockIRestClient)(nil).GetNfsShareByPath), ctx, path, accountId)
}

// GetPoolById mocks base method.
func (m *MockIRestClient) GetPoolById(ctx context.Context, poolId int64) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolById", ctx, poolId)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolById indicates an expected call of GetPoolById.
func (mr *MockIRestClientMockRecorder) GetPoolById(ctx, poolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolById",
		reflect.TypeOf((*MockIRestClient)(nil).GetPoolById), ctx, poolId)
}

// GetPoolByName mocks base method.
func (m *MockIRestClient) GetPoolByName(ctx context.Context, poolName string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolByName", ctx, poolName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolByName indicates an expected call of GetPoolByName.
func (mr *MockIRestClientMockRecorder) GetPoolByName(ctx, poolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetPoolByName), ctx, poolName)
}

// GetQoSNameByVolume mocks base method.
func (m *MockIRestClient) GetQoSNameByVolume(ctx context.Context, volName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoSNameByVolume", ctx, volName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQoSNameByVolume indicates an expected call of GetQoSNameByVolume.
func (mr *MockIRestClientMockRecorder) GetQoSNameByVolume(ctx, volName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoSNameByVolume",
		reflect.TypeOf((*MockIRestClient)(nil).GetQoSNameByVolume), ctx, volName)
}

// GetQoSPolicyAssociationCount mocks base method.
func (m *MockIRestClient) GetQoSPolicyAssociationCount(ctx context.Context, qosPolicyId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoSPolicyAssociationCount", ctx, qosPolicyId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQoSPolicyAssociationCount indicates an expected call of GetQoSPolicyAssociationCount.
func (mr *MockIRestClientMockRecorder) GetQoSPolicyAssociationCount(ctx, qosPolicyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoSPolicyAssociationCount",
		reflect.TypeOf((*MockIRestClient)(nil).GetQoSPolicyAssociationCount), ctx, qosPolicyId)
}

// GetQoSPolicyIdByFsName mocks base method.
func (m *MockIRestClient) GetQoSPolicyIdByFsName(ctx context.Context, namespaceName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoSPolicyIdByFsName", ctx, namespaceName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQoSPolicyIdByFsName indicates an expected call of GetQoSPolicyIdByFsName.
func (mr *MockIRestClientMockRecorder) GetQoSPolicyIdByFsName(ctx, namespaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoSPolicyIdByFsName",
		reflect.TypeOf((*MockIRestClient)(nil).GetQoSPolicyIdByFsName), ctx, namespaceName)
}

// GetQuotaByDTreeId mocks base method.
func (m *MockIRestClient) GetQuotaByDTreeId(ctx context.Context, dTreeId string) (*client.DTreeQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotaByDTreeId", ctx, dTreeId)
	ret0, _ := ret[0].(*client.DTreeQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotaByDTreeId indicates an expected call of GetQuotaByDTreeId.
func (mr *MockIRestClientMockRecorder) GetQuotaByDTreeId(ctx, dTreeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotaByDTreeId",
		reflect.TypeOf((*MockIRestClient)(nil).GetQuotaByDTreeId), ctx, dTreeId)
}

// GetQuotaByFileSystemById mocks base method.
func (m *MockIRestClient) GetQuotaByFileSystemById(ctx context.Context, fsID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotaByFileSystemById", ctx, fsID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotaByFileSystemById indicates an expected call of GetQuotaByFileSystemById.
func (mr *MockIRestClientMockRecorder) GetQuotaByFileSystemById(ctx, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotaByFileSystemById",
		reflect.TypeOf((*MockIRestClient)(nil).GetQuotaByFileSystemById), ctx, fsID)
}

// GetQuotaByFileSystemName mocks base method.
func (m *MockIRestClient) GetQuotaByFileSystemName(ctx context.Context, fsName string) (*client.QueryQuotaResponse,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotaByFileSystemName", ctx, fsName)
	ret0, _ := ret[0].(*client.QueryQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotaByFileSystemName indicates an expected call of GetQuotaByFileSystemName.
func (mr *MockIRestClientMockRecorder) GetQuotaByFileSystemName(ctx, fsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotaByFileSystemName",
		reflect.TypeOf((*MockIRestClient)(nil).GetQuotaByFileSystemName), ctx, fsName)
}

// GetSnapshotByName mocks base method.
func (m *MockIRestClient) GetSnapshotByName(ctx context.Context, snapshotName string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotByName", ctx, snapshotName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotByName indicates an expected call of GetSnapshotByName.
func (mr *MockIRestClientMockRecorder) GetSnapshotByName(ctx, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetSnapshotByName), ctx, snapshotName)
}

// GetVolumeByName mocks base method.
func (m *MockIRestClient) GetVolumeByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName.
func (mr *MockIRestClientMockRecorder) GetVolumeByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName",
		reflect.TypeOf((*MockIRestClient)(nil).GetVolumeByName), ctx, name)
}

// KeepAlive mocks base method.
func (m *MockIRestClient) KeepAlive(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KeepAlive", ctx)
}

// KeepAlive indicates an expected call of KeepAlive.
func (mr *MockIRestClientMockRecorder) KeepAlive(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive",
		reflect.TypeOf((*MockIRestClient)(nil).KeepAlive), ctx)
}

// Login mocks base method.
func (m *MockIRestClient) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockIRestClientMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIRestClient)(nil).Login), ctx)
}

// Logout mocks base method.
func (m *MockIRestClient) Logout(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout.
func (mr *MockIRestClientMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIRestClient)(nil).Logout), ctx)
}

// QueryHostByPort mocks base method.
func (m *MockIRestClient) QueryHostByPort(ctx context.Context, port string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHostByPort", ctx, port)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostByPort indicates an expected call of QueryHostByPort.
func (mr *MockIRestClientMockRecorder) QueryHostByPort(ctx, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostByPort",
		reflect.TypeOf((*MockIRestClient)(nil).QueryHostByPort), ctx, port)
}

// QueryHostOfVolume mocks base method.
func (m *MockIRestClient) QueryHostOfVolume(ctx context.Context, lunName string) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHostOfVolume", ctx, lunName)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostOfVolume indicates an expected call of QueryHostOfVolume.
func (mr *MockIRestClientMockRecorder) QueryHostOfVolume(ctx, lunName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostOfVolume",
		reflect.TypeOf((*MockIRestClient)(nil).QueryHostOfVolume), ctx, lunName)
}

// QueryIscsiPortal mocks base method.
func (m *MockIRestClient) QueryIscsiPortal(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIscsiPortal", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIscsiPortal indicates an expected call of QueryIscsiPortal.
func (mr *MockIRestClientMockRecorder) QueryIscsiPortal(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIscsiPortal",
		reflect.TypeOf((*MockIRestClient)(nil).QueryIscsiPortal), ctx)
}

// QueryQuotaByFsId mocks base method.
func (m *MockIRestClient) QueryQuotaByFsId(ctx context.Context, fsID string) (*client.QueryQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryQuotaByFsId", ctx, fsID)
	ret0, _ := ret[0].(*client.QueryQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryQuotaByFsId indicates an expected call of QueryQuotaByFsId.
func (mr *MockIRestClientMockRecorder) QueryQuotaByFsId(ctx, fsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryQuotaByFsId",
		reflect.TypeOf((*MockIRestClient)(nil).QueryQuotaByFsId), ctx, fsID)
}

// ReLogin mocks base method.
func (m *MockIRestClient) ReLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockIRestClientMockRecorder) ReLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReLogin", reflect.TypeOf((*MockIRestClient)(nil).ReLogin),
		ctx)
}

// SetAccountId mocks base method.
func (m *MockIRestClient) SetAccountId(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountId", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountId indicates an expected call of SetAccountId.
func (mr *MockIRestClientMockRecorder) SetAccountId(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountId",
		reflect.TypeOf((*MockIRestClient)(nil).SetAccountId), ctx)
}

// UpdateDTreeQuota mocks base method.
func (m *MockIRestClient) UpdateDTreeQuota(ctx context.Context, quotaId string, capacity int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDTreeQuota", ctx, quotaId, capacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDTreeQuota indicates an expected call of UpdateDTreeQuota.
func (mr *MockIRestClientMockRecorder) UpdateDTreeQuota(ctx, quotaId, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDTreeQuota",
		reflect.TypeOf((*MockIRestClient)(nil).UpdateDTreeQuota), ctx, quotaId, capacity)
}

// UpdateHost mocks base method.
func (m *MockIRestClient) UpdateHost(ctx context.Context, hostName string, alua map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", ctx, hostName, alua)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost.
func (mr *MockIRestClientMockRecorder) UpdateHost(ctx, hostName, alua any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost",
		reflect.TypeOf((*MockIRestClient)(nil).UpdateHost), ctx, hostName, alua)
}

// UpdateQuota mocks base method.
func (m *MockIRestClient) UpdateQuota(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuota", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuota indicates an expected call of UpdateQuota.
func (mr *MockIRestClientMockRecorder) UpdateQuota(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuota",
		reflect.TypeOf((*MockIRestClient)(nil).UpdateQuota), ctx, params)
}

// ValidateLogin mocks base method.
func (m *MockIRestClient) ValidateLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLogin indicates an expected call of ValidateLogin.
func (mr *MockIRestClientMockRecorder) ValidateLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLogin",
		reflect.TypeOf((*MockIRestClient)(nil).ValidateLogin), ctx)
}
