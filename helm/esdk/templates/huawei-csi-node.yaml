apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-node
  namespace: {{ .Values.kubernetes.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-driver-registrar-runner
rules:
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "get","list","watch","create","update","patch" ]
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "get" ]
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "list" ]
  - apiGroups: [ "" ]
    resources: [ "persistentvolumes","persistentvolumeclaims" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-driver-registrar-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: huawei-csi-driver-registrar-runner
subjects:
  - kind: ServiceAccount
    name: huawei-csi-node
    namespace: {{ .Values.kubernetes.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-node-runner
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets","configmaps" ]
    verbs: [ "get","update","create" ]
  - apiGroups: [ "xuanwu.huawei.io" ]
    resources: [ "storagebackendclaims","storagebackendcontents" ]
    verbs: [ "get" ]
  - apiGroups: [ "xuanwu.huawei.io" ]
    resources: [ "resourcetopologies" ]
    verbs: [ "create", "get", "update", "delete" ]
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "list","get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-node-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: huawei-csi-node-runner
subjects:
  - kind: ServiceAccount
    name: huawei-csi-node
    namespace: {{ .Values.kubernetes.namespace }}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    provisioner: csi.huawei.com
  name: huawei-csi-node
  namespace: {{ .Values.kubernetes.namespace }}
spec:
  selector:
    matchLabels:
      app: huawei-csi-node
      provisioner: csi.huawei.com
  template:
    metadata:
      annotations:
        # Each call to the template method generates a unique random string.
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        app: huawei-csi-node
        provisioner: csi.huawei.com
    spec:
      {{ if .Values.node.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.node.nodeSelector | nindent 8 }}
      {{ end }}
      {{ if .Values.node.tolerations }}
      tolerations:
      {{- toYaml .Values.node.tolerations | nindent 6 }}
      {{ end }}
      containers:
        - name: liveness-probe
          args:
            - "--csi-address=/csi/csi.sock"
            - "--http-endpoint=$(HEALTHZ_HTTP_ENDPOINT)"
          image: {{ .Values.images.sidecar.livenessProbe }}
          imagePullPolicy: {{ .Values.sidecarImagePullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 128Mi
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HEALTHZ_HTTP_ENDPOINT
              value: "$(POD_IP):{{ int .Values.node.livenessProbePort | default 9800 }}"
        - name: csi-node-driver-registrar
          args:
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path={{ .Values.kubeletConfigDir }}/plugins/{{ .Values.csiDriver.driverName }}/csi.sock"
          image: {{ .Values.images.sidecar.registrar }}
          imagePullPolicy: {{ .Values.sidecarImagePullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /registration
              name: registration-dir
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
        - name: huawei-csi-driver
          image: {{ required "Must provide the CSI node service node image." .Values.images.huaweiCSIService }}
          imagePullPolicy: {{ .Values.huaweiImagePullPolicy }}
          args:
            - "--endpoint={{ .Values.csiDriver.endpoint }}"
            - "--driver-name={{ .Values.csiDriver.driverName }}"
            - "--connector-threads={{ .Values.csiDriver.connectorThreads }}"
            - "--volume-use-multipath={{ .Values.csiDriver.volumeUseMultipath }}"
            - "--all-path-online={{ default false .Values.csiDriver.allPathOnline }}"
            - "--kubelet-volume-devices-dir-name=/{{ default "volumeDevices" .Values.node.kubeletVolumeDevicesDirName }}/"
            {{ if .Values.csiDriver.volumeUseMultipath }}
            - "--scsi-multipath-type={{ .Values.csiDriver.scsiMultipathType }}"
            - "--nvme-multipath-type={{ .Values.csiDriver.nvmeMultipathType }}"
            {{ end }}
            - "--scan-volume-timeout={{ .Values.csiDriver.scanVolumeTimeout }}"
            - "--exec-command-timeout={{ int (.Values.csiDriver).execCommandTimeout | default 30 }}"
            - "--logging-module={{ .Values.csiDriver.nodeLogging.module }}"
            - "--log-level={{ .Values.csiDriver.nodeLogging.level }}"
            {{ if eq .Values.csiDriver.nodeLogging.module "file" }}
            - "--log-file-dir={{ .Values.csiDriver.nodeLogging.fileDir }}"
            - "--log-file-size={{ .Values.csiDriver.nodeLogging.fileSize }}"
            - "--max-backups={{ .Values.csiDriver.nodeLogging.maxBackups }}"
            {{ end }}
            {{ if .Values.node.maxVolumesPerNode }}
            - "--max-volumes-per-node={{ .Values.node.maxVolumesPerNode }}"
            {{ end }}
          env:
            - name: CSI_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CSI_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - rm -f /csi/csi.sock
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            periodSeconds: 60
            timeoutSeconds: 3
          ports:
            - containerPort: {{ int .Values.node.livenessProbePort | default 9800 }}
              name: healthz
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - SYS_ADMIN
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: {{ .Values.kubeletConfigDir }}
              mountPropagation: Bidirectional
              name: pods-dir
            - mountPath: /var/log
              name: log-dir
            - mountPath: /dev
              mountPropagation: HostToContainer
              name: dev-dir
            - mountPath: /var/lib/iscsi
              name: iscsi-dir
            - mountPath: /etc/iscsi
              name: iscsi-config-dir
            - mountPath: /etc/nvme
              name: nvme-config-dir
            - mountPath: /etc/localtime
              name: host-time
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 128Mi
      hostNetwork: true
      hostPID: true
      serviceAccountName: huawei-csi-node
      volumes:
        - hostPath:
            path: {{ .Values.kubeletConfigDir }}/plugins/{{ .Values.csiDriver.driverName }}
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: {{ .Values.kubeletConfigDir }}/plugins_registry
            type: Directory
          name: registration-dir
        - hostPath:
            path: {{ .Values.kubeletConfigDir }}
            type: Directory
          name: pods-dir
        - hostPath:
            path: /dev
            type: Directory
          name: dev-dir
        - hostPath:
            path: /var/lib/iscsi
          name: iscsi-dir
        - hostPath:
            path: /var/log/
            type: Directory
          name: log-dir
        - hostPath:
            path: /etc/iscsi
            type: DirectoryOrCreate
          name: iscsi-config-dir
        - hostPath:
            path: /etc/nvme
            type: DirectoryOrCreate
          name: nvme-config-dir
        - hostPath:
            path: /etc/localtime
            type: File
          name: host-time