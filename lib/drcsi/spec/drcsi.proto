/*
 Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

syntax = "proto3";
package drcsi.v1;

import "google/protobuf/wrappers.proto";

option go_package = "lib/go/drcsi";

message GetProviderInfoRequest{}

message GetProviderInfoResponse{
  string provider = 1;
  string version = 2;
  map <string, string> manifest = 3;
}

message GetProviderCapabilitiesRequest{}

message GetProviderCapabilitiesResponse{
  repeated ProviderCapability capabilities = 1;
}

message ProviderCapability {
  message Service {
    enum Type {
      UNKNOWN = 0;
      STORAGE_BACKEND_SERVICE = 1;
    }
    Type type = 1;
  }

  message StorageBackendServiceSupport {
    enum Type {
      UNKNOWN = 0;
    }
    Type type = 1;
  }

  oneof type {
    Service service = 1;
    StorageBackendServiceSupport storage_backend_service = 2;
  }
}

message ProbeRequest{}

message ProbeResponse {
  google.protobuf.BoolValue ready = 1;
}

message Empty {}

message UploadRequest {
  message FileInfo {
    string file_identifier = 1;
    map <string, string> attributes = 2;
  }

  oneof Data {
    FileInfo info = 1;
    bytes chunk_data = 2;
  }
}

message ObjectExistsRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

message ObjectExistsResponse{
  bool exists = 1;
}

message DownloadRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

message DownloadResponse {
  message FileInfo {
    string file_identifier = 1;
    map <string, string> attributes = 2;
  }

  oneof Data {
    FileInfo info = 1;
    bytes chunk_data = 2;
  }
}

message DeleteRequest {
  string file_identifier = 1;
  map <string, string> attributes = 2;
}

service Identity {
  rpc GetProviderInfo(GetProviderInfoRequest)
      returns (GetProviderInfoResponse) {}

  rpc GetProviderCapabilities(GetProviderCapabilitiesRequest)
      returns (GetProviderCapabilitiesResponse) {}

  rpc Probe(ProbeRequest)
      returns (ProbeResponse) {}
}

service StorageBackend {
  rpc AddStorageBackend(AddStorageBackendRequest) returns (AddStorageBackendResponse) {}
  rpc RemoveStorageBackend(RemoveStorageBackendRequest) returns (RemoveStorageBackendResponse) {}
  rpc UpdateStorageBackend(UpdateStorageBackendRequest) returns (UpdateStorageBackendResponse) {}
  rpc GetBackendStats(GetBackendStatsRequest) returns (GetBackendStatsResponse) {}
}

message AddStorageBackendRequest {
  // the name of the StorageBackendContent, this filed is REQUIRED.
  string name = 1;
  // the meta of the configmap, <namespace>/<name>. this file is OPTIONAL.
  string configmap_meta = 2;
  // the meta of the secret, <namespace>/<name>. this file is OPTIONAL.
  string secret_meta = 3;
  // Provider specific parameters passed in as opaque key-value pairs.
  // This field is OPTIONAL.
  map<string, string> parameters = 4;
}

message AddStorageBackendResponse {
  // The identifier for this backend, generated by the plugin.
  // This field is REQUIRED.
  string backend_id = 1;
}

message RemoveStorageBackendRequest{
  // the name of the StorageBackendContent, this filed is REQUIRED.
  string name = 1;
  // the ID of the backend to remove
  string backend_id = 2;
}

message RemoveStorageBackendResponse{
  // Intentionally empty.
}

message UpdateStorageBackendRequest{
  // the name of the StorageBackendContent, this filed is REQUIRED.
  string name = 1;
  // the ID of the backend to update
  string backend_id = 2;
  // the meta of the configmap, <namespace>/<name>. this file is OPTIONAL.
  string configmap_meta = 3;
  // the meta of the secret, <namespace>/<name>. this file is OPTIONAL.
  string secret_meta = 4;
  // Provider specific parameters passed in as opaque key-value pairs.
  // This field is OPTIONAL.
  map<string, string> parameters = 5;
}

message UpdateStorageBackendResponse{
  // Intentionally empty.
}

message GetBackendStatsRequest{
  // the name of the StorageBackendContent, this filed is REQUIRED.
  string name = 1;
  // the ID of the backend to remove
  string backend_id = 2;
}

message GetBackendStatsResponse{
  // the provider_version is storage provider version
  string provider_version = 1;
  // the vendor name of the storage provider
  string vendor_name = 2;
  // the provider name of the storage provider
  string provider_name = 3;
  // the storage backend pool list
  repeated Pool pools = 4;
  // the storage backend capabilities
  map<string, bool> capabilities = 5;
  // the storage backend specifications
  map<string, string> specifications = 6;
  // the storage is online
  bool online = 7;
}

message Pool {
  // the name is pool name
  string name = 1;
  // the capacities is pool capacities
  map<string, string> capacities = 2;
}

service ModifyVolumeInterface  {
  rpc ModifyVolume(ModifyVolumeRequest) returns (ModifyVolumeResponse) {}
}

message ModifyVolumeRequest{
  // Contains identity information for the existing volume.
  // This field is REQUIRED.
  string VolumeId = 1;
  // specific source sc parameters, passed in as
  // opaque key-value pairs.
  map<string, string> StorageClassParameters = 2;
  // specific volume attributes to mutate, passed in as
  // opaque key-value pairs.
  map<string, string> MutableParameters = 3;
}

message ModifyVolumeResponse{
  // Reserved for expansion
  map<string, string> VolumeAttributes = 1;
}