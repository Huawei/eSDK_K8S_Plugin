//
//Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.1
// source: drcsi.proto

package drcsi

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProviderCapability_Service_Type int32

const (
	ProviderCapability_Service_UNKNOWN                 ProviderCapability_Service_Type = 0
	ProviderCapability_Service_STORAGE_BACKEND_SERVICE ProviderCapability_Service_Type = 1
)

// Enum value maps for ProviderCapability_Service_Type.
var (
	ProviderCapability_Service_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "STORAGE_BACKEND_SERVICE",
	}
	ProviderCapability_Service_Type_value = map[string]int32{
		"UNKNOWN":                 0,
		"STORAGE_BACKEND_SERVICE": 1,
	}
)

func (x ProviderCapability_Service_Type) Enum() *ProviderCapability_Service_Type {
	p := new(ProviderCapability_Service_Type)
	*p = x
	return p
}

func (x ProviderCapability_Service_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderCapability_Service_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drcsi_proto_enumTypes[0].Descriptor()
}

func (ProviderCapability_Service_Type) Type() protoreflect.EnumType {
	return &file_drcsi_proto_enumTypes[0]
}

func (x ProviderCapability_Service_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderCapability_Service_Type.Descriptor instead.
func (ProviderCapability_Service_Type) EnumDescriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{4, 0, 0}
}

type ProviderCapability_StorageBackendServiceSupport_Type int32

const (
	ProviderCapability_StorageBackendServiceSupport_UNKNOWN ProviderCapability_StorageBackendServiceSupport_Type = 0
)

// Enum value maps for ProviderCapability_StorageBackendServiceSupport_Type.
var (
	ProviderCapability_StorageBackendServiceSupport_Type_name = map[int32]string{
		0: "UNKNOWN",
	}
	ProviderCapability_StorageBackendServiceSupport_Type_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x ProviderCapability_StorageBackendServiceSupport_Type) Enum() *ProviderCapability_StorageBackendServiceSupport_Type {
	p := new(ProviderCapability_StorageBackendServiceSupport_Type)
	*p = x
	return p
}

func (x ProviderCapability_StorageBackendServiceSupport_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderCapability_StorageBackendServiceSupport_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drcsi_proto_enumTypes[1].Descriptor()
}

func (ProviderCapability_StorageBackendServiceSupport_Type) Type() protoreflect.EnumType {
	return &file_drcsi_proto_enumTypes[1]
}

func (x ProviderCapability_StorageBackendServiceSupport_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderCapability_StorageBackendServiceSupport_Type.Descriptor instead.
func (ProviderCapability_StorageBackendServiceSupport_Type) EnumDescriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{4, 1, 0}
}

type GetProviderInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProviderInfoRequest) Reset() {
	*x = GetProviderInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderInfoRequest) ProtoMessage() {}

func (x *GetProviderInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderInfoRequest.ProtoReflect.Descriptor instead.
func (*GetProviderInfoRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{0}
}

type GetProviderInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Version  string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Manifest map[string]string `protobuf:"bytes,3,rep,name=manifest,proto3" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetProviderInfoResponse) Reset() {
	*x = GetProviderInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderInfoResponse) ProtoMessage() {}

func (x *GetProviderInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderInfoResponse.ProtoReflect.Descriptor instead.
func (*GetProviderInfoResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{1}
}

func (x *GetProviderInfoResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetProviderInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetProviderInfoResponse) GetManifest() map[string]string {
	if x != nil {
		return x.Manifest
	}
	return nil
}

type GetProviderCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProviderCapabilitiesRequest) Reset() {
	*x = GetProviderCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderCapabilitiesRequest) ProtoMessage() {}

func (x *GetProviderCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetProviderCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{2}
}

type GetProviderCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []*ProviderCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GetProviderCapabilitiesResponse) Reset() {
	*x = GetProviderCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderCapabilitiesResponse) ProtoMessage() {}

func (x *GetProviderCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetProviderCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{3}
}

func (x *GetProviderCapabilitiesResponse) GetCapabilities() []*ProviderCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ProviderCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ProviderCapability_Service_
	//	*ProviderCapability_StorageBackendService
	Type isProviderCapability_Type `protobuf_oneof:"type"`
}

func (x *ProviderCapability) Reset() {
	*x = ProviderCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability) ProtoMessage() {}

func (x *ProviderCapability) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability.ProtoReflect.Descriptor instead.
func (*ProviderCapability) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{4}
}

func (m *ProviderCapability) GetType() isProviderCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ProviderCapability) GetService() *ProviderCapability_Service {
	if x, ok := x.GetType().(*ProviderCapability_Service_); ok {
		return x.Service
	}
	return nil
}

func (x *ProviderCapability) GetStorageBackendService() *ProviderCapability_StorageBackendServiceSupport {
	if x, ok := x.GetType().(*ProviderCapability_StorageBackendService); ok {
		return x.StorageBackendService
	}
	return nil
}

type isProviderCapability_Type interface {
	isProviderCapability_Type()
}

type ProviderCapability_Service_ struct {
	Service *ProviderCapability_Service `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type ProviderCapability_StorageBackendService struct {
	StorageBackendService *ProviderCapability_StorageBackendServiceSupport `protobuf:"bytes,2,opt,name=storage_backend_service,json=storageBackendService,proto3,oneof"`
}

func (*ProviderCapability_Service_) isProviderCapability_Type() {}

func (*ProviderCapability_StorageBackendService) isProviderCapability_Type() {}

type ProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProbeRequest) Reset() {
	*x = ProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeRequest) ProtoMessage() {}

func (x *ProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeRequest.ProtoReflect.Descriptor instead.
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{5}
}

type ProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready *wrappers.BoolValue `protobuf:"bytes,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ProbeResponse) Reset() {
	*x = ProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResponse) ProtoMessage() {}

func (x *ProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResponse.ProtoReflect.Descriptor instead.
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{6}
}

func (x *ProbeResponse) GetReady() *wrappers.BoolValue {
	if x != nil {
		return x.Ready
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{7}
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*UploadRequest_Info
	//	*UploadRequest_ChunkData
	Data isUploadRequest_Data `protobuf_oneof:"Data"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{8}
}

func (m *UploadRequest) GetData() isUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadRequest) GetInfo() *UploadRequest_FileInfo {
	if x, ok := x.GetData().(*UploadRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *UploadRequest) GetChunkData() []byte {
	if x, ok := x.GetData().(*UploadRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isUploadRequest_Data interface {
	isUploadRequest_Data()
}

type UploadRequest_Info struct {
	Info *UploadRequest_FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadRequest_Info) isUploadRequest_Data() {}

func (*UploadRequest_ChunkData) isUploadRequest_Data() {}

type ObjectExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectExistsRequest) Reset() {
	*x = ObjectExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectExistsRequest) ProtoMessage() {}

func (x *ObjectExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectExistsRequest.ProtoReflect.Descriptor instead.
func (*ObjectExistsRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectExistsRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *ObjectExistsRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ObjectExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ObjectExistsResponse) Reset() {
	*x = ObjectExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectExistsResponse) ProtoMessage() {}

func (x *ObjectExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectExistsResponse.ProtoReflect.Descriptor instead.
func (*ObjectExistsResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DownloadRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*DownloadResponse_Info
	//	*DownloadResponse_ChunkData
	Data isDownloadResponse_Data `protobuf_oneof:"Data"`
}

func (x *DownloadResponse) Reset() {
	*x = DownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse) ProtoMessage() {}

func (x *DownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse.ProtoReflect.Descriptor instead.
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{12}
}

func (m *DownloadResponse) GetData() isDownloadResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DownloadResponse) GetInfo() *DownloadResponse_FileInfo {
	if x, ok := x.GetData().(*DownloadResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *DownloadResponse) GetChunkData() []byte {
	if x, ok := x.GetData().(*DownloadResponse_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isDownloadResponse_Data interface {
	isDownloadResponse_Data()
}

type DownloadResponse_Info struct {
	Info *DownloadResponse_FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type DownloadResponse_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*DownloadResponse_Info) isDownloadResponse_Data() {}

func (*DownloadResponse_ChunkData) isDownloadResponse_Data() {}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DeleteRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type AddStorageBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the StorageBackendContent, this filed is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the meta of the configmap, <namespace>/<name>. this file is OPTIONAL.
	ConfigmapMeta string `protobuf:"bytes,2,opt,name=configmap_meta,json=configmapMeta,proto3" json:"configmap_meta,omitempty"`
	// the meta of the secret, <namespace>/<name>. this file is OPTIONAL.
	SecretMeta string `protobuf:"bytes,3,opt,name=secret_meta,json=secretMeta,proto3" json:"secret_meta,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddStorageBackendRequest) Reset() {
	*x = AddStorageBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStorageBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStorageBackendRequest) ProtoMessage() {}

func (x *AddStorageBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStorageBackendRequest.ProtoReflect.Descriptor instead.
func (*AddStorageBackendRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{14}
}

func (x *AddStorageBackendRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddStorageBackendRequest) GetConfigmapMeta() string {
	if x != nil {
		return x.ConfigmapMeta
	}
	return ""
}

func (x *AddStorageBackendRequest) GetSecretMeta() string {
	if x != nil {
		return x.SecretMeta
	}
	return ""
}

func (x *AddStorageBackendRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type AddStorageBackendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier for this backend, generated by the plugin.
	// This field is REQUIRED.
	BackendId string `protobuf:"bytes,1,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
}

func (x *AddStorageBackendResponse) Reset() {
	*x = AddStorageBackendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStorageBackendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStorageBackendResponse) ProtoMessage() {}

func (x *AddStorageBackendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStorageBackendResponse.ProtoReflect.Descriptor instead.
func (*AddStorageBackendResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{15}
}

func (x *AddStorageBackendResponse) GetBackendId() string {
	if x != nil {
		return x.BackendId
	}
	return ""
}

type RemoveStorageBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the StorageBackendContent, this filed is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the ID of the backend to remove
	BackendId string `protobuf:"bytes,2,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
}

func (x *RemoveStorageBackendRequest) Reset() {
	*x = RemoveStorageBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStorageBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStorageBackendRequest) ProtoMessage() {}

func (x *RemoveStorageBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStorageBackendRequest.ProtoReflect.Descriptor instead.
func (*RemoveStorageBackendRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveStorageBackendRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveStorageBackendRequest) GetBackendId() string {
	if x != nil {
		return x.BackendId
	}
	return ""
}

type RemoveStorageBackendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveStorageBackendResponse) Reset() {
	*x = RemoveStorageBackendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStorageBackendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStorageBackendResponse) ProtoMessage() {}

func (x *RemoveStorageBackendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStorageBackendResponse.ProtoReflect.Descriptor instead.
func (*RemoveStorageBackendResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{17}
}

type UpdateStorageBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the StorageBackendContent, this filed is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the ID of the backend to update
	BackendId string `protobuf:"bytes,2,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
	// the meta of the configmap, <namespace>/<name>. this file is OPTIONAL.
	ConfigmapMeta string `protobuf:"bytes,3,opt,name=configmap_meta,json=configmapMeta,proto3" json:"configmap_meta,omitempty"`
	// the meta of the secret, <namespace>/<name>. this file is OPTIONAL.
	SecretMeta string `protobuf:"bytes,4,opt,name=secret_meta,json=secretMeta,proto3" json:"secret_meta,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateStorageBackendRequest) Reset() {
	*x = UpdateStorageBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStorageBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStorageBackendRequest) ProtoMessage() {}

func (x *UpdateStorageBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStorageBackendRequest.ProtoReflect.Descriptor instead.
func (*UpdateStorageBackendRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateStorageBackendRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStorageBackendRequest) GetBackendId() string {
	if x != nil {
		return x.BackendId
	}
	return ""
}

func (x *UpdateStorageBackendRequest) GetConfigmapMeta() string {
	if x != nil {
		return x.ConfigmapMeta
	}
	return ""
}

func (x *UpdateStorageBackendRequest) GetSecretMeta() string {
	if x != nil {
		return x.SecretMeta
	}
	return ""
}

func (x *UpdateStorageBackendRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UpdateStorageBackendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateStorageBackendResponse) Reset() {
	*x = UpdateStorageBackendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStorageBackendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStorageBackendResponse) ProtoMessage() {}

func (x *UpdateStorageBackendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStorageBackendResponse.ProtoReflect.Descriptor instead.
func (*UpdateStorageBackendResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{19}
}

type GetBackendStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the StorageBackendContent, this filed is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the ID of the backend to remove
	BackendId string `protobuf:"bytes,2,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
}

func (x *GetBackendStatsRequest) Reset() {
	*x = GetBackendStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackendStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendStatsRequest) ProtoMessage() {}

func (x *GetBackendStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBackendStatsRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{20}
}

func (x *GetBackendStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBackendStatsRequest) GetBackendId() string {
	if x != nil {
		return x.BackendId
	}
	return ""
}

type GetBackendStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the provider_version is storage provider version
	ProviderVersion string `protobuf:"bytes,1,opt,name=provider_version,json=providerVersion,proto3" json:"provider_version,omitempty"`
	// the vendor name of the storage provider
	VendorName string `protobuf:"bytes,2,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	// the provider name of the storage provider
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// the storage backend pool list
	Pools []*Pool `protobuf:"bytes,4,rep,name=pools,proto3" json:"pools,omitempty"`
	// the storage backend capabilities
	Capabilities map[string]bool `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// the storage backend specifications
	Specifications map[string]string `protobuf:"bytes,6,rep,name=specifications,proto3" json:"specifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the storage is online
	Online bool `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *GetBackendStatsResponse) Reset() {
	*x = GetBackendStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackendStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendStatsResponse) ProtoMessage() {}

func (x *GetBackendStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBackendStatsResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{21}
}

func (x *GetBackendStatsResponse) GetProviderVersion() string {
	if x != nil {
		return x.ProviderVersion
	}
	return ""
}

func (x *GetBackendStatsResponse) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *GetBackendStatsResponse) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *GetBackendStatsResponse) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *GetBackendStatsResponse) GetCapabilities() map[string]bool {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *GetBackendStatsResponse) GetSpecifications() map[string]string {
	if x != nil {
		return x.Specifications
	}
	return nil
}

func (x *GetBackendStatsResponse) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name is pool name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the capacities is pool capacities
	Capacities map[string]string `protobuf:"bytes,2,rep,name=capacities,proto3" json:"capacities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{22}
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetCapacities() map[string]string {
	if x != nil {
		return x.Capacities
	}
	return nil
}

type ModifyVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains identity information for the existing volume.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=VolumeId,proto3" json:"VolumeId,omitempty"`
	// specific source sc parameters, passed in as
	// opaque key-value pairs.
	StorageClassParameters map[string]string `protobuf:"bytes,2,rep,name=StorageClassParameters,proto3" json:"StorageClassParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// specific volume attributes to mutate, passed in as
	// opaque key-value pairs.
	MutableParameters map[string]string `protobuf:"bytes,3,rep,name=MutableParameters,proto3" json:"MutableParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyVolumeRequest) Reset() {
	*x = ModifyVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyVolumeRequest) ProtoMessage() {}

func (x *ModifyVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyVolumeRequest.ProtoReflect.Descriptor instead.
func (*ModifyVolumeRequest) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{23}
}

func (x *ModifyVolumeRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ModifyVolumeRequest) GetStorageClassParameters() map[string]string {
	if x != nil {
		return x.StorageClassParameters
	}
	return nil
}

func (x *ModifyVolumeRequest) GetMutableParameters() map[string]string {
	if x != nil {
		return x.MutableParameters
	}
	return nil
}

type ModifyVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for expansion
	VolumeAttributes map[string]string `protobuf:"bytes,1,rep,name=VolumeAttributes,proto3" json:"VolumeAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyVolumeResponse) Reset() {
	*x = ModifyVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyVolumeResponse) ProtoMessage() {}

func (x *ModifyVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyVolumeResponse.ProtoReflect.Descriptor instead.
func (*ModifyVolumeResponse) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{24}
}

func (x *ModifyVolumeResponse) GetVolumeAttributes() map[string]string {
	if x != nil {
		return x.VolumeAttributes
	}
	return nil
}

type ProviderCapability_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ProviderCapability_Service_Type `protobuf:"varint,1,opt,name=type,proto3,enum=drcsi.v1.ProviderCapability_Service_Type" json:"type,omitempty"`
}

func (x *ProviderCapability_Service) Reset() {
	*x = ProviderCapability_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability_Service) ProtoMessage() {}

func (x *ProviderCapability_Service) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability_Service.ProtoReflect.Descriptor instead.
func (*ProviderCapability_Service) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ProviderCapability_Service) GetType() ProviderCapability_Service_Type {
	if x != nil {
		return x.Type
	}
	return ProviderCapability_Service_UNKNOWN
}

type ProviderCapability_StorageBackendServiceSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ProviderCapability_StorageBackendServiceSupport_Type `protobuf:"varint,1,opt,name=type,proto3,enum=drcsi.v1.ProviderCapability_StorageBackendServiceSupport_Type" json:"type,omitempty"`
}

func (x *ProviderCapability_StorageBackendServiceSupport) Reset() {
	*x = ProviderCapability_StorageBackendServiceSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability_StorageBackendServiceSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability_StorageBackendServiceSupport) ProtoMessage() {}

func (x *ProviderCapability_StorageBackendServiceSupport) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability_StorageBackendServiceSupport.ProtoReflect.Descriptor instead.
func (*ProviderCapability_StorageBackendServiceSupport) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ProviderCapability_StorageBackendServiceSupport) GetType() ProviderCapability_StorageBackendServiceSupport_Type {
	if x != nil {
		return x.Type
	}
	return ProviderCapability_StorageBackendServiceSupport_UNKNOWN
}

type UploadRequest_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UploadRequest_FileInfo) Reset() {
	*x = UploadRequest_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest_FileInfo) ProtoMessage() {}

func (x *UploadRequest_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest_FileInfo.ProtoReflect.Descriptor instead.
func (*UploadRequest_FileInfo) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UploadRequest_FileInfo) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *UploadRequest_FileInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DownloadResponse_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadResponse_FileInfo) Reset() {
	*x = DownloadResponse_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drcsi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse_FileInfo) ProtoMessage() {}

func (x *DownloadResponse_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drcsi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse_FileInfo.ProtoReflect.Descriptor instead.
func (*DownloadResponse_FileInfo) Descriptor() ([]byte, []int) {
	return file_drcsi_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DownloadResponse_FileInfo) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DownloadResponse_FileInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_drcsi_proto protoreflect.FileDescriptor

var file_drcsi_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64,
	0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x63, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64,
	0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a,
	0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x7a, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x87,
	0x01, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb7, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xc4, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a,
	0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xc7, 0x01,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xc0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a,
	0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x57, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x3f, 0x0a,
	0x11, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x99, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x03,
	0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x71, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64,
	0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x92, 0x02, 0x0a, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x64, 0x72, 0x63, 0x73,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x72,
	0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9c,
	0x03, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x12, 0x5e, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x72, 0x63,
	0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x64, 0x72, 0x63, 0x73,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x25, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x72, 0x63, 0x73,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x68, 0x0a,
	0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x72, 0x63, 0x73, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x6c, 0x69, 0x62, 0x2f, 0x67,
	0x6f, 0x2f, 0x64, 0x72, 0x63, 0x73, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drcsi_proto_rawDescOnce sync.Once
	file_drcsi_proto_rawDescData = file_drcsi_proto_rawDesc
)

func file_drcsi_proto_rawDescGZIP() []byte {
	file_drcsi_proto_rawDescOnce.Do(func() {
		file_drcsi_proto_rawDescData = protoimpl.X.CompressGZIP(file_drcsi_proto_rawDescData)
	})
	return file_drcsi_proto_rawDescData
}

var file_drcsi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_drcsi_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_drcsi_proto_goTypes = []interface{}{
	(ProviderCapability_Service_Type)(0),                      // 0: drcsi.v1.ProviderCapability.Service.Type
	(ProviderCapability_StorageBackendServiceSupport_Type)(0), // 1: drcsi.v1.ProviderCapability.StorageBackendServiceSupport.Type
	(*GetProviderInfoRequest)(nil),                            // 2: drcsi.v1.GetProviderInfoRequest
	(*GetProviderInfoResponse)(nil),                           // 3: drcsi.v1.GetProviderInfoResponse
	(*GetProviderCapabilitiesRequest)(nil),                    // 4: drcsi.v1.GetProviderCapabilitiesRequest
	(*GetProviderCapabilitiesResponse)(nil),                   // 5: drcsi.v1.GetProviderCapabilitiesResponse
	(*ProviderCapability)(nil),                                // 6: drcsi.v1.ProviderCapability
	(*ProbeRequest)(nil),                                      // 7: drcsi.v1.ProbeRequest
	(*ProbeResponse)(nil),                                     // 8: drcsi.v1.ProbeResponse
	(*Empty)(nil),                                             // 9: drcsi.v1.Empty
	(*UploadRequest)(nil),                                     // 10: drcsi.v1.UploadRequest
	(*ObjectExistsRequest)(nil),                               // 11: drcsi.v1.ObjectExistsRequest
	(*ObjectExistsResponse)(nil),                              // 12: drcsi.v1.ObjectExistsResponse
	(*DownloadRequest)(nil),                                   // 13: drcsi.v1.DownloadRequest
	(*DownloadResponse)(nil),                                  // 14: drcsi.v1.DownloadResponse
	(*DeleteRequest)(nil),                                     // 15: drcsi.v1.DeleteRequest
	(*AddStorageBackendRequest)(nil),                          // 16: drcsi.v1.AddStorageBackendRequest
	(*AddStorageBackendResponse)(nil),                         // 17: drcsi.v1.AddStorageBackendResponse
	(*RemoveStorageBackendRequest)(nil),                       // 18: drcsi.v1.RemoveStorageBackendRequest
	(*RemoveStorageBackendResponse)(nil),                      // 19: drcsi.v1.RemoveStorageBackendResponse
	(*UpdateStorageBackendRequest)(nil),                       // 20: drcsi.v1.UpdateStorageBackendRequest
	(*UpdateStorageBackendResponse)(nil),                      // 21: drcsi.v1.UpdateStorageBackendResponse
	(*GetBackendStatsRequest)(nil),                            // 22: drcsi.v1.GetBackendStatsRequest
	(*GetBackendStatsResponse)(nil),                           // 23: drcsi.v1.GetBackendStatsResponse
	(*Pool)(nil),                                              // 24: drcsi.v1.Pool
	(*ModifyVolumeRequest)(nil),                               // 25: drcsi.v1.ModifyVolumeRequest
	(*ModifyVolumeResponse)(nil),                              // 26: drcsi.v1.ModifyVolumeResponse
	nil,                                                       // 27: drcsi.v1.GetProviderInfoResponse.ManifestEntry
	(*ProviderCapability_Service)(nil),                        // 28: drcsi.v1.ProviderCapability.Service
	(*ProviderCapability_StorageBackendServiceSupport)(nil),   // 29: drcsi.v1.ProviderCapability.StorageBackendServiceSupport
	(*UploadRequest_FileInfo)(nil),                            // 30: drcsi.v1.UploadRequest.FileInfo
	nil,                                                       // 31: drcsi.v1.UploadRequest.FileInfo.AttributesEntry
	nil,                                                       // 32: drcsi.v1.ObjectExistsRequest.AttributesEntry
	nil,                                                       // 33: drcsi.v1.DownloadRequest.AttributesEntry
	(*DownloadResponse_FileInfo)(nil),                         // 34: drcsi.v1.DownloadResponse.FileInfo
	nil,                                                       // 35: drcsi.v1.DownloadResponse.FileInfo.AttributesEntry
	nil,                                                       // 36: drcsi.v1.DeleteRequest.AttributesEntry
	nil,                                                       // 37: drcsi.v1.AddStorageBackendRequest.ParametersEntry
	nil,                                                       // 38: drcsi.v1.UpdateStorageBackendRequest.ParametersEntry
	nil,                                                       // 39: drcsi.v1.GetBackendStatsResponse.CapabilitiesEntry
	nil,                                                       // 40: drcsi.v1.GetBackendStatsResponse.SpecificationsEntry
	nil,                                                       // 41: drcsi.v1.Pool.CapacitiesEntry
	nil,                                                       // 42: drcsi.v1.ModifyVolumeRequest.StorageClassParametersEntry
	nil,                                                       // 43: drcsi.v1.ModifyVolumeRequest.MutableParametersEntry
	nil,                                                       // 44: drcsi.v1.ModifyVolumeResponse.VolumeAttributesEntry
	(*wrappers.BoolValue)(nil),                                // 45: google.protobuf.BoolValue
}
var file_drcsi_proto_depIdxs = []int32{
	27, // 0: drcsi.v1.GetProviderInfoResponse.manifest:type_name -> drcsi.v1.GetProviderInfoResponse.ManifestEntry
	6,  // 1: drcsi.v1.GetProviderCapabilitiesResponse.capabilities:type_name -> drcsi.v1.ProviderCapability
	28, // 2: drcsi.v1.ProviderCapability.service:type_name -> drcsi.v1.ProviderCapability.Service
	29, // 3: drcsi.v1.ProviderCapability.storage_backend_service:type_name -> drcsi.v1.ProviderCapability.StorageBackendServiceSupport
	45, // 4: drcsi.v1.ProbeResponse.ready:type_name -> google.protobuf.BoolValue
	30, // 5: drcsi.v1.UploadRequest.info:type_name -> drcsi.v1.UploadRequest.FileInfo
	32, // 6: drcsi.v1.ObjectExistsRequest.attributes:type_name -> drcsi.v1.ObjectExistsRequest.AttributesEntry
	33, // 7: drcsi.v1.DownloadRequest.attributes:type_name -> drcsi.v1.DownloadRequest.AttributesEntry
	34, // 8: drcsi.v1.DownloadResponse.info:type_name -> drcsi.v1.DownloadResponse.FileInfo
	36, // 9: drcsi.v1.DeleteRequest.attributes:type_name -> drcsi.v1.DeleteRequest.AttributesEntry
	37, // 10: drcsi.v1.AddStorageBackendRequest.parameters:type_name -> drcsi.v1.AddStorageBackendRequest.ParametersEntry
	38, // 11: drcsi.v1.UpdateStorageBackendRequest.parameters:type_name -> drcsi.v1.UpdateStorageBackendRequest.ParametersEntry
	24, // 12: drcsi.v1.GetBackendStatsResponse.pools:type_name -> drcsi.v1.Pool
	39, // 13: drcsi.v1.GetBackendStatsResponse.capabilities:type_name -> drcsi.v1.GetBackendStatsResponse.CapabilitiesEntry
	40, // 14: drcsi.v1.GetBackendStatsResponse.specifications:type_name -> drcsi.v1.GetBackendStatsResponse.SpecificationsEntry
	41, // 15: drcsi.v1.Pool.capacities:type_name -> drcsi.v1.Pool.CapacitiesEntry
	42, // 16: drcsi.v1.ModifyVolumeRequest.StorageClassParameters:type_name -> drcsi.v1.ModifyVolumeRequest.StorageClassParametersEntry
	43, // 17: drcsi.v1.ModifyVolumeRequest.MutableParameters:type_name -> drcsi.v1.ModifyVolumeRequest.MutableParametersEntry
	44, // 18: drcsi.v1.ModifyVolumeResponse.VolumeAttributes:type_name -> drcsi.v1.ModifyVolumeResponse.VolumeAttributesEntry
	0,  // 19: drcsi.v1.ProviderCapability.Service.type:type_name -> drcsi.v1.ProviderCapability.Service.Type
	1,  // 20: drcsi.v1.ProviderCapability.StorageBackendServiceSupport.type:type_name -> drcsi.v1.ProviderCapability.StorageBackendServiceSupport.Type
	31, // 21: drcsi.v1.UploadRequest.FileInfo.attributes:type_name -> drcsi.v1.UploadRequest.FileInfo.AttributesEntry
	35, // 22: drcsi.v1.DownloadResponse.FileInfo.attributes:type_name -> drcsi.v1.DownloadResponse.FileInfo.AttributesEntry
	2,  // 23: drcsi.v1.Identity.GetProviderInfo:input_type -> drcsi.v1.GetProviderInfoRequest
	4,  // 24: drcsi.v1.Identity.GetProviderCapabilities:input_type -> drcsi.v1.GetProviderCapabilitiesRequest
	7,  // 25: drcsi.v1.Identity.Probe:input_type -> drcsi.v1.ProbeRequest
	16, // 26: drcsi.v1.StorageBackend.AddStorageBackend:input_type -> drcsi.v1.AddStorageBackendRequest
	18, // 27: drcsi.v1.StorageBackend.RemoveStorageBackend:input_type -> drcsi.v1.RemoveStorageBackendRequest
	20, // 28: drcsi.v1.StorageBackend.UpdateStorageBackend:input_type -> drcsi.v1.UpdateStorageBackendRequest
	22, // 29: drcsi.v1.StorageBackend.GetBackendStats:input_type -> drcsi.v1.GetBackendStatsRequest
	25, // 30: drcsi.v1.ModifyVolumeInterface.ModifyVolume:input_type -> drcsi.v1.ModifyVolumeRequest
	3,  // 31: drcsi.v1.Identity.GetProviderInfo:output_type -> drcsi.v1.GetProviderInfoResponse
	5,  // 32: drcsi.v1.Identity.GetProviderCapabilities:output_type -> drcsi.v1.GetProviderCapabilitiesResponse
	8,  // 33: drcsi.v1.Identity.Probe:output_type -> drcsi.v1.ProbeResponse
	17, // 34: drcsi.v1.StorageBackend.AddStorageBackend:output_type -> drcsi.v1.AddStorageBackendResponse
	19, // 35: drcsi.v1.StorageBackend.RemoveStorageBackend:output_type -> drcsi.v1.RemoveStorageBackendResponse
	21, // 36: drcsi.v1.StorageBackend.UpdateStorageBackend:output_type -> drcsi.v1.UpdateStorageBackendResponse
	23, // 37: drcsi.v1.StorageBackend.GetBackendStats:output_type -> drcsi.v1.GetBackendStatsResponse
	26, // 38: drcsi.v1.ModifyVolumeInterface.ModifyVolume:output_type -> drcsi.v1.ModifyVolumeResponse
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_drcsi_proto_init() }
func file_drcsi_proto_init() {
	if File_drcsi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drcsi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStorageBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStorageBackendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStorageBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStorageBackendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStorageBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStorageBackendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackendStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackendStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability_StorageBackendServiceSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drcsi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_drcsi_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ProviderCapability_Service_)(nil),
		(*ProviderCapability_StorageBackendService)(nil),
	}
	file_drcsi_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UploadRequest_Info)(nil),
		(*UploadRequest_ChunkData)(nil),
	}
	file_drcsi_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DownloadResponse_Info)(nil),
		(*DownloadResponse_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drcsi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_drcsi_proto_goTypes,
		DependencyIndexes: file_drcsi_proto_depIdxs,
		EnumInfos:         file_drcsi_proto_enumTypes,
		MessageInfos:      file_drcsi_proto_msgTypes,
	}.Build()
	File_drcsi_proto = out.File
	file_drcsi_proto_rawDesc = nil
	file_drcsi_proto_goTypes = nil
	file_drcsi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityClient interface {
	GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error)
	GetProviderCapabilities(ctx context.Context, in *GetProviderCapabilitiesRequest, opts ...grpc.CallOption) (*GetProviderCapabilitiesResponse, error)
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error) {
	out := new(GetProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.Identity/GetProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) GetProviderCapabilities(ctx context.Context, in *GetProviderCapabilitiesRequest, opts ...grpc.CallOption) (*GetProviderCapabilitiesResponse, error) {
	out := new(GetProviderCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.Identity/GetProviderCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.Identity/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
type IdentityServer interface {
	GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error)
	GetProviderCapabilities(context.Context, *GetProviderCapabilitiesRequest) (*GetProviderCapabilitiesResponse, error)
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

// UnimplementedIdentityServer can be embedded to have forward compatible implementations.
type UnimplementedIdentityServer struct {
}

func (*UnimplementedIdentityServer) GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderInfo not implemented")
}
func (*UnimplementedIdentityServer) GetProviderCapabilities(context.Context, *GetProviderCapabilitiesRequest) (*GetProviderCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderCapabilities not implemented")
}
func (*UnimplementedIdentityServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}

func RegisterIdentityServer(s *grpc.Server, srv IdentityServer) {
	s.RegisterService(&_Identity_serviceDesc, srv)
}

func _Identity_GetProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.Identity/GetProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetProviderInfo(ctx, req.(*GetProviderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_GetProviderCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetProviderCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.Identity/GetProviderCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetProviderCapabilities(ctx, req.(*GetProviderCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.Identity/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drcsi.v1.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderInfo",
			Handler:    _Identity_GetProviderInfo_Handler,
		},
		{
			MethodName: "GetProviderCapabilities",
			Handler:    _Identity_GetProviderCapabilities_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Identity_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drcsi.proto",
}

// StorageBackendClient is the client API for StorageBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageBackendClient interface {
	AddStorageBackend(ctx context.Context, in *AddStorageBackendRequest, opts ...grpc.CallOption) (*AddStorageBackendResponse, error)
	RemoveStorageBackend(ctx context.Context, in *RemoveStorageBackendRequest, opts ...grpc.CallOption) (*RemoveStorageBackendResponse, error)
	UpdateStorageBackend(ctx context.Context, in *UpdateStorageBackendRequest, opts ...grpc.CallOption) (*UpdateStorageBackendResponse, error)
	GetBackendStats(ctx context.Context, in *GetBackendStatsRequest, opts ...grpc.CallOption) (*GetBackendStatsResponse, error)
}

type storageBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBackendClient(cc grpc.ClientConnInterface) StorageBackendClient {
	return &storageBackendClient{cc}
}

func (c *storageBackendClient) AddStorageBackend(ctx context.Context, in *AddStorageBackendRequest, opts ...grpc.CallOption) (*AddStorageBackendResponse, error) {
	out := new(AddStorageBackendResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.StorageBackend/AddStorageBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBackendClient) RemoveStorageBackend(ctx context.Context, in *RemoveStorageBackendRequest, opts ...grpc.CallOption) (*RemoveStorageBackendResponse, error) {
	out := new(RemoveStorageBackendResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.StorageBackend/RemoveStorageBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBackendClient) UpdateStorageBackend(ctx context.Context, in *UpdateStorageBackendRequest, opts ...grpc.CallOption) (*UpdateStorageBackendResponse, error) {
	out := new(UpdateStorageBackendResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.StorageBackend/UpdateStorageBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBackendClient) GetBackendStats(ctx context.Context, in *GetBackendStatsRequest, opts ...grpc.CallOption) (*GetBackendStatsResponse, error) {
	out := new(GetBackendStatsResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.StorageBackend/GetBackendStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageBackendServer is the server API for StorageBackend service.
type StorageBackendServer interface {
	AddStorageBackend(context.Context, *AddStorageBackendRequest) (*AddStorageBackendResponse, error)
	RemoveStorageBackend(context.Context, *RemoveStorageBackendRequest) (*RemoveStorageBackendResponse, error)
	UpdateStorageBackend(context.Context, *UpdateStorageBackendRequest) (*UpdateStorageBackendResponse, error)
	GetBackendStats(context.Context, *GetBackendStatsRequest) (*GetBackendStatsResponse, error)
}

// UnimplementedStorageBackendServer can be embedded to have forward compatible implementations.
type UnimplementedStorageBackendServer struct {
}

func (*UnimplementedStorageBackendServer) AddStorageBackend(context.Context, *AddStorageBackendRequest) (*AddStorageBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorageBackend not implemented")
}
func (*UnimplementedStorageBackendServer) RemoveStorageBackend(context.Context, *RemoveStorageBackendRequest) (*RemoveStorageBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStorageBackend not implemented")
}
func (*UnimplementedStorageBackendServer) UpdateStorageBackend(context.Context, *UpdateStorageBackendRequest) (*UpdateStorageBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageBackend not implemented")
}
func (*UnimplementedStorageBackendServer) GetBackendStats(context.Context, *GetBackendStatsRequest) (*GetBackendStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendStats not implemented")
}

func RegisterStorageBackendServer(s *grpc.Server, srv StorageBackendServer) {
	s.RegisterService(&_StorageBackend_serviceDesc, srv)
}

func _StorageBackend_AddStorageBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorageBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBackendServer).AddStorageBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.StorageBackend/AddStorageBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBackendServer).AddStorageBackend(ctx, req.(*AddStorageBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBackend_RemoveStorageBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStorageBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBackendServer).RemoveStorageBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.StorageBackend/RemoveStorageBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBackendServer).RemoveStorageBackend(ctx, req.(*RemoveStorageBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBackend_UpdateStorageBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBackendServer).UpdateStorageBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.StorageBackend/UpdateStorageBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBackendServer).UpdateStorageBackend(ctx, req.(*UpdateStorageBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBackend_GetBackendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBackendServer).GetBackendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.StorageBackend/GetBackendStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBackendServer).GetBackendStats(ctx, req.(*GetBackendStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drcsi.v1.StorageBackend",
	HandlerType: (*StorageBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStorageBackend",
			Handler:    _StorageBackend_AddStorageBackend_Handler,
		},
		{
			MethodName: "RemoveStorageBackend",
			Handler:    _StorageBackend_RemoveStorageBackend_Handler,
		},
		{
			MethodName: "UpdateStorageBackend",
			Handler:    _StorageBackend_UpdateStorageBackend_Handler,
		},
		{
			MethodName: "GetBackendStats",
			Handler:    _StorageBackend_GetBackendStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drcsi.proto",
}

// ModifyVolumeInterfaceClient is the client API for ModifyVolumeInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModifyVolumeInterfaceClient interface {
	ModifyVolume(ctx context.Context, in *ModifyVolumeRequest, opts ...grpc.CallOption) (*ModifyVolumeResponse, error)
}

type modifyVolumeInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewModifyVolumeInterfaceClient(cc grpc.ClientConnInterface) ModifyVolumeInterfaceClient {
	return &modifyVolumeInterfaceClient{cc}
}

func (c *modifyVolumeInterfaceClient) ModifyVolume(ctx context.Context, in *ModifyVolumeRequest, opts ...grpc.CallOption) (*ModifyVolumeResponse, error) {
	out := new(ModifyVolumeResponse)
	err := c.cc.Invoke(ctx, "/drcsi.v1.ModifyVolumeInterface/ModifyVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModifyVolumeInterfaceServer is the server API for ModifyVolumeInterface service.
type ModifyVolumeInterfaceServer interface {
	ModifyVolume(context.Context, *ModifyVolumeRequest) (*ModifyVolumeResponse, error)
}

// UnimplementedModifyVolumeInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedModifyVolumeInterfaceServer struct {
}

func (*UnimplementedModifyVolumeInterfaceServer) ModifyVolume(context.Context, *ModifyVolumeRequest) (*ModifyVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVolume not implemented")
}

func RegisterModifyVolumeInterfaceServer(s *grpc.Server, srv ModifyVolumeInterfaceServer) {
	s.RegisterService(&_ModifyVolumeInterface_serviceDesc, srv)
}

func _ModifyVolumeInterface_ModifyVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyVolumeInterfaceServer).ModifyVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drcsi.v1.ModifyVolumeInterface/ModifyVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyVolumeInterfaceServer).ModifyVolume(ctx, req.(*ModifyVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModifyVolumeInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drcsi.v1.ModifyVolumeInterface",
	HandlerType: (*ModifyVolumeInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifyVolume",
			Handler:    _ModifyVolumeInterface_ModifyVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drcsi.proto",
}
